
Inter Integrated Circuit - I2C Protocol.

I2C -- 

serial data communication between Integrated circuits.

I2C protocol details -- 
how data should be sent, how data should be received
how hand shaking should happen between sender and receiver,
error handling are complex than SPI. 
In other words SPI is simple protocol compared to I2C.

SPI - specificiation 

I2C - NXP - 


For SPI there is no dedicated spec but TI and motorola have 
their own spec.

I2C protocol - multi master capable.
SPI has no guidelines to achieve this, but depends on 
MCU designers. 

STM SPI peripherals can be used in multi master configurations 
but arbitration should be handled by software code.

ACK - I2C hardware automatically ACKs every byte received.
SPI does not support any automatic ACKing.

I2C needs just 2 pins for the communication.
SPI consumes more pins when more slaves are involved.

I2c - just 2 pins -- 
SCL and SDA 

+Vcc - pulled to VCC using pull up resistor to SDA and SCL.

Addressing -- 

I2C master talks to slaves based on slave address - 
whereas in SPI dedicatd pin is used to select the slave.

Communication - 
I2C is half duplex whereas SPI is full duplex.

For I2C the max speed is 4Mhz in ultra speed plus.
For STM microcontrollers the max speed is just 400 KHZ.
For SPI max speed is its Fpclk/2. That means if the peripheral
clock is 20Mhz, then speed can be 10Mhz.

In i2c slave can make master wait by holding the clock down
if it is busy, thanks to clock stretching feature of I2C.
But in SPI, slave has no control over clock, programmers 
may use their own trick to overcome this situation.

Data rate -- 
number of bits transferred from sender to receiver in 1 sec 
is very much lesser in I2c compare to SPI.

I2C - low data rate - gathering data from sensors.

periphear clock of 40Mhz, then in I2c -- 400Kpbs you can achieve max.

SPI is 50 times faster than I2C.

###
I2C bus terminology --

transmitter - device which sends data to the bus
receiver - device which receives data from the bus
master - the device which initiates a transfer generates clock 
signals and terminates a transfer.
Slave - the device addressed by a master
Multi-master -more than one master can attempt to control the bus 
at the same time without corupting the message.

Arbitration - procedure/technique to ensure that, if more than one master 
simultaneoulsy tries to control the bus, only one is allowed 
to do so and the winning message is not corrupted.

Synchronization - procedure to synchronize the clock signals of 
two or more devices.


Data transfer is initiated by the master.
###

I2C - SDA and SCL signals -

Both SDA and SCL are bi-directional lines connected to a positive 
supply voltage via pull up resistor. When the bus is free, 
both lines are held at high.

The output stages of device ocnnected to the bus must have an 
open drain or open collector configuration.

The bus capacitance limites the number of interfaces connected to 
the bus.

###

I2C Pin configuration -- 

Whenever you face problems in I2C, probe the 
SDA and SCL line after i2c initilization.
It must be held at high ( 3.3 V or 1.8 V
depending up on IO voltage levels of your board).

###
I2C modes 
###

Standard mode -- upto to 100Kbps
Fast mode -  upto to 400kbps
Faster mode + - upto 1 Mbps 
High speed mode - 3.4 Mbps -- not supported by STM32F4x.

#####################

Standard mode and fast mode - 

Standard mode - max - 100kbps 
-- when first i2c spec was released.

standard mode device however are not upward compatible;
they cant communicate with devices of fast mode or above.

##
Features of fast mode -- 
upto 400Kbps 
-- 0 to 100kbps in I2c 
-- 

configuring the i2c mode is very important.

### Basics of I2C protocol 


Data is always initiated by the master.

Master first producing the start condition - 

Start condition - S -- 

Address phase - 7 bits + R/W(low active).

R/W = 0 means write i.e. transmission.
1 = read .

ACK  

D7--D0 --
ACK 

P - Stop bit.

Every byte put on the SDA line must be 8 bits long.
Each byte must be followed by an acknowledge bit.
Data is transferred with the MSB first.

When slave receives 1 byte which is data the 
slave is going to send the ACK.

#####
R/W- --
1- means Read , indicates request for data. - READ.

ACK is given by the master. 

Stop condition - releases the bus.
Other master can initiate the communication.

START and STOP conditions -- 

Transactions begin with a START (s) 
and are terminated by a STOP (P).

A high to low transition on the SDA line while 
SCL is high defines a START condition.

A low to high transition on the SDA line 
while sCL is high defines a stop condition.

During ACK, the SDA is pulled low - 
--
Master - repeated Start -- 
basically to read the data.
#########################

START and STOP conditions are always generated 
by the master.
The bus is considered to be busy after the start 
condition.

The bus is considered to be free again a certain 
time after the STOP condition.

When the bus is free another master ( if present)
can get the chance to claim the bus.

The bus stays busy if a repeated START (Sr) 
is generated instead of a STOP condition. 

Most of the MCU's i2c peripheral support both 
master and slave mode. You need not to configure
the mode because when the peripheral generates 
the start condition it automatically becomes 
the master and when it generates the stop condition
it goes back to slave mode.

#########

I2C Address  phase - 

SDA 
SCL 
##
ACK - 
The transmitter releases the SDA line during 
the acknowledge clock pulse so the receiver 
can pull the SDA line low and it remains stable 
low during the high period at this clock pulse.

The ACK takes place after every byte 
The ACK bit allows the receiver to signal the 
transmitter that the byte was successfuly 
received and another byte may be sent. 

The master generates all clock pulses, including 
the acknowledge ninth clock pulse.

SCL 1 and SDA 0 -- ACK 

SCL 1 and SDA 1 -- NACK 

## Data validity -- 

The data on the SDA line must be stable 
during the HIGH period of the clock. The 
HIGH or LOW state at the data line can only 
change when the clock signal on the SCL line 
is low. One clock pulse is 
generated for each data bit  
transferred. This is not 
applicable for start and stop 
transition. 

Repeated start without stop.

MCU -- EEPROM  ( slave)

Write followed by READ.

or 
Read followed by Write -- 

-->> Start -- write 
-- > repeat start - read 
-=--> finally stop.

#############
I2C peripherals of your MCU --

APB1 - I2C1, I2C2, I2C3 -- 

SDA -- noise filter -- data control

SCL -- noise filter == clock control..

Only one data register --> data shift register.


write to data register --

gets copied to data shift register.
Half duplex so only one data register.

when the data received. -- it goes to 
data shift register when 1 byte is received.

the data is moved from shift register to the 
data register. The data register is then read.

## Master mode or slave.

In slave mode -- 
the slave address in own address register.

Clock Control register is controlled by 
CCR, CR1 and CR2 -- register - 
status registers -- SR1 and SR2 ..

Control logic --> DMA and Interrupts.

#############

I2C driver development - 

11th May 2019

i2c_driver.c 
i2c_driver.h 

Driver API requirements and user 
configurable items.
I2C Driver -- 

I2C initialization
I2C master Tx 
I2C master Rx 

I2C slave Tx
I2C Slave Rx 
I2C Error Interrupt handling 
I2C Event Inerrupt handling.

Configurable items for user application.

I2C SCL speed

I2C Device Address 

I2C ACK Control .
-- automatic ACK enable or disable.

I2c FMDutyCycle.
-- if speed is more than 100kbps 
then it is fast mode. 
What should be the duty cycle of the 
clock when the speed is more than
100kbps that is fast mode.

create stm32f4xx_i2c_driver.c 
and stm32f4xx_i2c_driver.h 

- I2C periperhal register def struct
-- I2C base address macros
-- I2c peripheral definition macros.
-- macros to enable and disable 
i2c peripherla clock.
-- bit position definitions of i2c 
peripheral.

I2C_Config_t 

uint32_t I2c_sclSpeed;
uint8_t I2c_deviceAddress;
uint8_t I2C_ACKControl;
uint16_t  I2C_FMDutyCycle;

struct
{
  I2C_RegDef_t 
  I2C_Config_t 

}Handle;

options for I2c_SCL_Speed 

@I2C_SCL_SPEED

#define I2c_SCL_SPEED_Standard_MODE    100000
#define I2c_SCL_SPEED_FAST_MODE_4k     400000
#define I2c_SCL_SPEED_FAST_MODE_2k     200000

@I2cDeviceAddress 

@ACK_Control 

#define I2c_ACK_ENALBE   1
#define I2c_ACK DISABLE   0

@DutyCycle -- of the serial clock in fast mode.

#define I2c_FM_DUTY_2             (0)
#define I2c_FM_DUTYE_16_9         (1)

API prototypes -- 

void I2C_PeriClockControl

void I2C_Init
void I2c_DeInit()

Data send and receive..

I2C_InterruptConfig
I2c_IRQPriorityCOnfig.

I2c_Peripherlal Control.
I2C_GetFlagStatus


void I2c_ApplicationEventCallback(

##3
i2cInit -- steps --

1) Configure the mode - standard or fast.
2) Configure the speed of the serial clock - SCL 
3) Confiure the device address - Applicable when device is 
slave.
4) Enable the ACking.
5) Configure the rise time for I2c Pins ..

time required from ground to Vcc - slew rate.

All these configuraiton must be done when the 
peripheral is disabled in the control register.

void I2c_Init(I2cReg_De_t )
{

}

Configure the speed of the Serial clock.

CCR and CR2 -- 
FREQ and CCR -- 


I2C serial clock - SCL control settings.

I2C peripheral, CR2 and CCR registers are used 
to control the I2C serial clock settings 
and other i2c timings like setup time and hold time.

CR2 and CCR registers - 


CR2 -- 
FRQ[5:0] - APB2 - Peripheral clock frequency.

APB1 -- prescaler - 16Mhz -- CR2_FREQ = 16 Mhz.


CCR --  


Standard mdoe, generate a 100 Khz SCL frequency
APB1 Clock = 16 Mhz.


I2C mode selection - standard mode or fast mode.

FREQ field -- 16 Mhz. 

Calculate and program CCR value of CCR field. 


SM =

SCLCK = 100 Khz 

time period == 10 micro seconds.

50 % deuty cycle   us 

5 * 10 ^ -6 = CCR * 62.5 * 10^-9 

CCR = 80 = 0x50


##

200 kHZ SCL freq -- 

FM mode - 
select the duty cycle - fast mode. 

FOR SM - 50 % duty cycle.

Fast mode -- 
Tlow = 2 T- high

Tlow = 1.8 T- high

Program the Freq field of CR2 with the value of PCK2

T high + T low = 3 * CCR * TPCLK1 

CCR == 26

If duty = 1, 

T high + T low = 25 * CCR * TPCLK1
#################

I2C -- 
recommended value of Thigh and Tlow -- 
Specification Table 10 -- 

Tlow - min 4.7 -- standard mode.

Thight = min  4.0 -- standard mode

###
Fast mode - 1.3 micro seconds 
--- 0.6 micro seconds.

#########################

5 * 10 ^-3  * 10 * -3 

= 5 * 10^ -6 

1/16 = 62.5 * 10 ^-3 * 10^-6 = 62.5 * 10^-9

######################################

I2C_Init() 
--->
Clock Stretching --

means that holding the clock to 0 
or ground level.

The moment clock is held at low, 
then the whole I2C interface pauses 
until clock is given up to its normal 
operation level.

Use of clock stretching -- 

master or slave -- slow down the 
communication by stretching SCL to low,
which prevent the clock to rise high 
again and the i2c communication 
stops for a while.

I2C slave is not able to co-operate with 
the clock speed given by the master 
and needs to slow down a little. 

if slave needs time , then it takes 
the advantage of clock stretchign,
and by holding clock at low, it momentary 
pauses the i2c operation.

###

The slave is not ready for more data, 
so it buys time by holding the clock 
low. The master will wait for the clock 
line to be released before proceeding to 
the next frame.

###

Enable the clock stretching feature.

Possiblility of clock stretching required.

I2C_Init(

uint32_t tempReg = 0;

tempReg |= pI2CHandle-> ACKControl << 10;  // CR1
p2Ic2CHandle->CR1 = tempReg;

tempReg = 0; 

// CR2_FREQ
tempReg == RCC_GETValuPck1Value/1000000U; i.e. 16.
p2Ic2CHandle-CR2 = tempReg & 0x3F;

tempReg = I2DeviceAddress << 1;
->OAR1 = tempReg;
tempReg |= ( 1 << 14);
// CCR calculations.

uint16_t ccr_value = 0;
tempReg = 0;
if SCL_Speed <= I2C_SM
{
   CCR = 16/2 * I2CSCLSPEED;
   ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
tempReg |= ccrValue & 0xFFF;   
}
else
{
   //fastMode;
   tempReg |= 0x1 << 15;
   tempReg | = DutyCycle << 14;
   if( duty == 0)
   cir = fpclk/(3 *fscl);
   
   else 
   
   cir = fpclk/(25 * fscl);
   
   
}

CCR = tempReg;

// Trise Register -- 



CCR = Fpclk/(2 *Fscl);






CR2 -- Freq[5:0] - 


uint16_t AHB_Prescala[8] = {2,4,8,16}

uint32_t RCC_GetPCK1Value()
{
   Bits 3:2 - 
   
   SWS - system clock switch -- 
   uint8_t clk_Src -- 
   
   clksrc = RCC->CFGR >> 2 & 0x3;
   if(clksrc == 0)
   SystemClk = 16000 000;
   if(clksrc == 1)
   systemcklk = 8000 0000;
   
   if( clksrc == 2)
   {
     systemclk = RCC_GetPLLOutputClok();
   }
   
   temp = RCC->CFGR  >> 4  &  0XF;
   if( temp < 8)
   {
     ahb = 1;
   }
   ahb = AHB_PreScalar[temp -8 ];
  

}


// ack control bit // CR1
// Freq field of CR2
/// device own address - oAR1 

//CCR value - 

SM 

and 

FM 
-- duty = 0 


and duty = 1

#####################################

Transfer sequence diagram for master transmitter .

S -- Start -- 
EV5 -- SB=1 Start bit = 1, cleared by reading SR1 register 
followed by writing DR register with address. 

Address phase -- 1 byte - 7 bits + 1 R/W.

Ack/NACK.

ACK - EV6 -- ADDR =1, cleared by reading SR1 register followed by 
reading SR2.

EV8_1 -- TxE =1, shift register empty, data register empty, write 
Data1 in DR.
EV8: TXE=1, shift register not empty, data register empty, cleared by 
writing DR register.

-EV8_2 - TXE=1, BTF=1, Porgram stop request, TxE and BTF are cleared by 
hardware by the stop condition.

BTF - byte transfer finished.


void I2C_MasterDataSend(I2Chandle_t , uint8_t *pTxbuffer, uin32_t len, uint8_t slaveAddr)
{
 //1. Generate the Start condition
 //2. Confirm that start generation is completed by 
 // checking the SB flag in the SR1 
 // Note: Until SB is cleared SCL will be stretched 
 (pull to low)
 
 //3. Send the address of the slave with r/nw bit 
 set to w(0) (total 8 bits)
 
 //4. Confirm that address phase is completed by checking 
 the ADDR flag in the SR1.
 // 5. Clear the ADDR flag according to its software 
 sequence
 // until ADDr is cleard SCL will be streteched 
 (pulled to low)
 //6. Send the data until len becomes 0.
 //7. When len becomes zero wait for TXE=1 and BTF=1
 before generating the STOP condition 
 //NOTE TXE=1 , BTF=1, means that both SR and 
 DR and empty and next transmission should begin 
 when BTF=1  SCL will be stretched ( pulled ot low)
 //8. Generate the STOP condition and master need 
 not to wait for the completion of stop condition.
 // Note. generating stop, automatically clears the BTF.
 
}

/**I2C related status flag definitions **/
SR1 - SB 
-- BTF 
#define I2C_TXE_FLAG ( 1 << I2C_SR1_TXE)
#define I2C_RNXE_FLAG ( 1 << I2C_SR_RXNE)

Timeout or Tlow error - SCL remained low for 25 ms - 
timeout.
Master cummulative extend Time low is 10 milliseconds.

--> When set in master mode, stop condition sent by 
hardware.


I2C_GenerateStartCondition(pI2CHandle->pI2cx);
while(!I2C_GetFlagStatus(pI2CHandle->pI2cx, I2C_FLAG_SB);

I2C_ExecuteAddressPhase




I2C_GenerateStartCondition(I2C_RegDef_t *pI2C)
{
   CR1 -- bit 8 
   
   pI2C-CR1 |=  0x1 << 8;
}

I2C_ExecuteAddressPhase(I2cxx, SlavAddress);
//confirm the address phase is completed by checking 
the AddR flag in the SR1.
while(!I2C_GetFlagStatus(pI2xc, I2c_FLAG_ADDR);

I2C_ClearADDRFlag();

Send the data until len becomes 0.

while( len >0)
{  
  while(! TXE);
  pI2cx->DR = *pTxBuffer;
  pTxBuffer++;
  len--;
}
//7. when len = 0, wait for Txe=1 and BTF=1 
before generating the STOP condition.
TXE=1, BTF=1 , means that both SR and DR are empty 
and next transmission shoujld begin when 
BTF=1 SCL will be stretched ( pulled to low)

While(  TXE);
while BTF);

I2C_GenerateStopCondition(I2C_RegDef_t )
{
   CR1 |= 0x1 << 9;
}


static void I2C_ExecuteAddressPhase(pI2c, uint8_t slaveAddre)
{
  //7 bit slave address moved by 1.
  SlaveAddr = SlaveAddr << 1;
  slavAddr &= ~(1);  //bit 0 means -- write.
  pI2cx->Dr = SlaveAddr;
  
}

static void I2C_ClearADDRFlag(pI2cx)
{
   uint32_t dummyRead = pIc2x->SR1;
   dummyRead = pI2cx->SR2;
}

###

I2C pull up resistance, Rise time and bus capacitance 
discussion.

Pull up Resistor -- Calculation --

Rp(min) = (Vcc - Vol(max))/ Iol

Vol - Low level output voltage.

Iol - Low level output voltage.

I2C verification - Table 9.

Vol1 -- 0./4 
Iol - 3 milli amperes.

Rp ( max) = tr/(0.8473 * Cb) 

tr -  rise time of both SDA and SCL signals.

Cb - capacitance load for each bus line.

--> 
tr -- 30% voltage and 70 % voltage. 

tr is proportional to Rc constant.

tr should be 1000 nano seconds  - maximum 
threshold - standard mode.

lower value of pull up resistors , decreases 
tr (good) but they also lead higher current 
consumption (bad).

more current will flow -- more current consumption 
for low power application..
Calculate the resistance value.

Bus capacitance. 

that the voltage level on the signal line 
can't change instantaneoulsy. 

Accidental I2C bus capaciatance
With the bigger length - more capacitance.

more devices connected then it will cause more 
capacitance.

calculate the pull up resistor - 

For fast-mode i2c communicaiton with the following 
parameters.
Cb = 150 pico Farad,
Vcc = 3.3 V
4 devices -- 


capacitance means that the voltage level on the signal
line (data or clock) can't change instantaneoulsy.

Rp(min) = (3.3 - 0.4) / (3 * 10^-3)
 = 966 ohms.
 
Rp (max) = 300 * 10^-9/0.8472 * 150 * 10 ^ -12
  = 2.3 K ohms.
  
966 ohms < Rp < 2.3 Kohms.

#################

T rise -- 

I2C_TRISE --

TRISE[5:0] -- 

maximum SCL rise time given in the 
I2C bus - 
Trise/Tpclk1 - 

Trise(max)/Tpclk1  

or Trise[5:0] = (Trise(max) * Fpclk1) + 1

Rise time max in Standard mode is 1000 ns.

I2C Init -- 

// Standard Mode -- 
tempreg = RCC_GETPCLk1Value()/ 1000 * 1000 + 1;

1 microseconds.
1/1000 * 1000 
//fastmode -- 


()RCC_GETPCLk1Value * 300)/1000 * 1000 + 1;


ITRISE = tempREg & 0x3F


 ################
 
 Use I2C master and I2c slave - Arduino  communication.
 
 
 Use I2C SCL = 100 Khz. - standard mode. 
 User internal pull up resistor for SCL and SDA.
 
 1) Adruino board
 2) ST board.
 3) Some jumper wires.
 -- 
 
 ST board --> I2C Arduino board --> USB 
 
 I2C1 -- 
 
 SDA (PB6) --- A4(Arduino)
 SCL (PB9) --- A5 (Arduino)
 
 GND to GND 
 
 ###
 
 Arduino -- 001I2CSlaveRxString.ino 
 
 GPIO pins over which I2C1 can communicate.
 
 #################
 
 0101i2c_master_tx_testing.c
 
int main()


I2C1_GPIOInit(void)
{
  GPIOB
  MODE_ALTFN;
  GPIO_OP_TYPE_OD;
  PinPudControl = Pin_PU;
  GPIO_PinAltFuMode = 4;
  PinSeed = FAST;
  
  SCL -- Pin_6;
  GPIO_INit(&I2cPins);
  Pin9
  
}

I2C_Handle_t i2c;

I2c_Inits(void)
{
i2Handle.pI2cx = I2C1;
 ACKENABLE;
 DeviceAddres = 0x61; //// 3.1.12 - don't use reserved address
DutyCycle = FM_DUTY_2;
I2C_SCL_SPEED = SPEED_SM;

I2Cinit();

}
 
 
 uint8_t i2c_data[]= "SJ I2C master tx works!\n";
 
 slave address of Arduino -- 
 Tools - Serial monitor -- 0x068


GPIO_ButtonInit();
I2C1_GPIOInits();

i2cPeriColockControl(pI2c, ENABLE);
I2C1_Inits();
I2C_PeripheralControl(I2C1, ENABLE);
//wait for button press - 

I2C_MasterSendData(&I2Chandle, some_data, strlen(someData), 0x68);

For every byte an ack is received. 
-- 

PB-9 - Data sheet - normal GPIO.
-- User Manual of the board - 
User Manual -- PB-9- Audio relatd.

-- SWIM - Single wire interface module.

###
Master receiving data from Slave.

S- start condition -- master device.

EV5 -- SB=1, cleared by reading SR1 
register followed by writing DR register.

R/w - bit 0. 

Slave -- ACK -- 
###
Address phase is succesful - EV6 - ADDR =1,
clock will be stretched to low. 

Whenever master sends NACK, Slave stops sending the 
data.

RxNE=1, cleared by reading DR register.

master - start condition -- 

EV5: SB=1, cleared by reading the SR1, 
followed by writing DR register.

EV6 -- ADDR=1, cleared by reading SR1 register 
followed by reading SR2. I

Ev7 - RXNE=1 cleared by DR register.
EV7_1 - 

When len =2, 
ACK=0,  -- NACK will be sent .
STOP =1 
read DR -  i.e. read the last byte.

Don't send ACK at second last of data. 

EV5 - SB=1, cleared by reading SR1 register followed 
by writing DR register.

master - Address phase -- 
send 7 bits address +  1( read bit).

Slave sends the ACK - 1. 

EV6: Addr =1, cleared by reading SR1 register followed 
by SR2. 

Data1 -- reception - shift register of master will be 
filled.
A -- Acknowledge sent by the master 

EV7 - RxNE =1, cleared by reading DR register.

Data2 -- read the data byte. 

master sends the ACK. 

Last data byte -- 
Master didn't send ACK but it sends NACK -- 
Master doesn't want more data.

NACK - Indication to the slave to stop sending the data.

P - Stop bit 
EV7 - reads the last byte.

Flags - pays attention has the capacity to make the 
clock stretch .
When the clock stretch - master and slave in the waiting
byte.

ACK - 1 - indication that send more data.

Read the data from the DR only when RxNe is 1.

##########

Receiving 1 byte -- 
Ack = 0,
Addr=1, Stop =1,

NACK --

Addr = 0==> data will be send now.

Don't clear ADDR make ACK = 0, STOP =1 
then make ADDR = 0. 
Wait until RxNE=1 and then read.

############

when len = 2, ACK=0, STOP=1, read DR -- 
Reset the ACK bit -- 
and the correct place is detected by the len field.

I2C_MasterReceiveData(I2C_Handle , *pRxBuffer, len, slaveAddr)
{
  1/ Generate the start condition 
  2// Confirm that the start generation is  completed 
by checking the SB fla in the sR1 
// note - until SB is cleared SCL will be stretched. 
//pulled to low.
3// Send the address of the savle with r/nw bit set to 
R(1) total 8 bits
//4 .. wait until address phase is completed by 
checking the ADDR flag in the SR1. 
//procedure to read only 1 byte from slave.

if (len = 1)
{
   //Disabling ACKing
   //Clear the addr flag 
   // wait until RXNE becomes 1 
   // generate STOP condition 
   
   // read data in to buffer 
   return.
  }
  
  if( len  > 1) 
  {
    //clear the ADDR flag 
	
	// read the data until len becomes zero
	for( len; i >0; i --)
	{
	    if( i == 2) // if last 2 bytes are remaining 
		{
		   //clear the ACk bit 
		   // generate the stop condition
		}
		read the data from data register in to buffer.
		//increment the buffer address 
		
   }
	re-enabling the ACking.
	
	
	
	
	}
  
  }

}  


}

I2C Master adn I2c Slave 

Use I2C SCL = 100 KHZ standard mode
User internal pull resistors for SDA and SCL lines.

Sketch - I2cSlaveTxString.ino

Procedure to read the data from Arduino slave.

0x51 - to read the length of the data from the slave.

0x52 -- to read the complete data from the slave.

I2C transactions to read the 1 byte ..

Master -- 0x51 -- write operation to slave. 

ACK bit is not setting - 10 th bit .

ACK - 

PE= 0, you cannot make ACK=1,

I2C_PeripheralControl 

I2C_ManageAck(I2C1, I2C_ACK_ENABLE

############################################

I2C interrupts and IRQ numbers

############################################

non-blocking -- 

I2C IRQs and Interrupt mapping.

Start bit sent -  Event flag - 

SB
ADDR 
ADD10
STOPF
BTF 

## ITEVFN 
###################
RxNE 
TxE    -- ITEVFEN and ITBUFFEN 

###
BERR, ARLO, AF, OVR, PECERR, TIMEOUT, SMBALERT --

ITERREN 

####################################################

EV_IRQ_LINE -- IRQn - 31 - NVIC - Events.

ER_IRQ_LINE -- 32 - NVIC - Error 

###
Event and Error -- 

I2C1 - 31 , 32

I2C2 - 33, 34

Bus ERROR -- detects  and SDA risign or falling 
edge which SCL is high. 

Arbitration loss error - 
multi master configuration.

ACK failure error - no ACK is returned for the byte sent.

Overrrun -- 
the data register has not been read yet and the 
new received byte is lost. 

overrun error will not happen in I2c if 
the clock stretching is enabled. 

Under-run error - when a new byte should be sent 
and the data register has not been writen yet and 
the same byte is sent twice.

time out error - stretching of clock more than the 
recommended time. 

On Bus error, the application might restart the 
I2C.

###

BTF flag in TX and preventing underru.

##
I2C_MasterSendDataIT API 
I2C_MasterReceiveDataIT API -

*pTxBuffer;
*pRxBuffer;
TxLen;
RxLen;
TxRxState;
DevAddr; //slave address
RxSize   // RxSize
repeated_start; //repeated start informations

I2C is half duplex. 
#I2C_READY
i2C_BUsy_IN_RX 
I2C_BuSY_IN_TX 

i2c_driver.h -->

uint8_t I2C_MasterSednDataIt
uint8_t I2C_MsasterReceviceDataIT 

--

Adding I2C IRQ number macros -- 

I2C_IRQInterruptConfig()

I2C_InterruptPrirorityCOnfig()


I2C_MasterSendDataIT(

ISR1 - Events -- 
I2C_EV_IRQHandling


ISR2 - I2C_ER_IRQHandling
################

void I2C_EV_IRQHandling(I2C_Handle_t *pI2Chandle);
{
  I2C_SR1 -- decode and find out why interrupt is triggered.
  // SB event
  
  //Interrupt handling for both master and slave mode of a device.
  uint32_t temp1, temp2, temp3;
  temp1 = p2Ic2CHandle->CR2 & ( 1 << I2C_CR2_ITEVTEN);
  temp2 = ->CR2 & ( ITBUFEN);
  
  temp3 = p2Ic2CHandle->SR1 &  ( 1 << I2C_SR1_SB);
  
  if( temp1 && temp3)
  {
    //SB flag is set 
	//interrupt is generated because of SB event.
	//SB event is generated only for master mode.
	ExecuteAddressPhase.
	if( p2Ic2CHandle-TxRxState == TxState)
	{
	   ExecuteAddressPhaseWrite();
	}
	else
	{
	   ExecuteAddressPhaseRead();
	}
	
  }
  
 temp3 =  SR1 &  ( 1  << ADDR)
 
 if( temp1 and temp3)
 {
    //ADDR flag
	// clear according to the logic .
	I2C_ClearADDRFlag();
 }
 
 temp3 = BTF;
 
 if( temp1 && temp3{
  //BTF flag is set
  //Byte transfer finished.
  SR - empty and DR empty --  TXE=1  -- during transmission.
  SR- Full and DR FUll - RXNE=1  - during reception.
  if BUSY_IN_TX == TxRxState
  -- make sure TxE is also set.
  if( SR1 &  1 << I2C_SR1_TXE)
  {
     //BTF, TXE=1
	 if9 TxLEN == 0)
	 {
	 //1. Generate the stop condition 
	 //if repeated start is disable
	 I2C_GenerateStopCondition(PI2cx);
	 
	 //2. reset all the member elements of the handle structure.
	 I2C_CloseSendData();
	 
	 //3. notify the application about transmission complete.
	  I2_ApplicationEventCallback(Handle, I2C_EV_TX_COMPLETE);
	  }
  }
  else if( BUSY_IN_RX)
  {
  
  }
 
 }
 
 temp3 = STOPF 
 
 if( temp1 and temp3)
 {
   //only execute in Slave mode. - 
   
   stop condition detected.
   //clear the STOPF --read SR1 and then write to CR1.
   CR1 | = 0x0000;  //just dummy write.
   //Notify the appliction - that stop is generated is detected.
   I2_ApplicationEventCallback( I2C_EV_STOP);
 
 }
 
 //TxE interrupt will happen if both bits are enable.
 
 TXE 
 
 if( temp1 and temp2 and temp3)
 {
 if( MSL == Master mode)
     //TxE flage is set.
	 DR is empty -- 
	 // We have to data tranmission 
	 if( TxRxState == BuYS_IN_TX)
	 {
	   if( lEN > 0)
	   {
	      // load the daat into DR 
		  
		  decrement the Txlen
		  
		  increment the TxBuffer;
	   
	   }
	 
	 }

 
 }
 
 I2C_ClearADDRFlag(I2Chandle pHandle)
 {
    if(masterMode)  //Check SR2 register
	{
	   if( BUSY_IN_RX)
	   {
	      rxSize == 1 
		  Disable the ACK.
		  Clear the Addr flag .
	   
	   }
	
	}
	else
	{
	  //clear the flag.
	
	}
	
 
 }
 
 RxNE flag -
 i2C_BUsy_IN_RX
 
{
    if(rxSize == 1)
	{
	       Read DR ;
		   len --;
	
	}
    if( rxSize > 1)
	{
	
	if( len == 2)
	{
	   ACK_DISABLE
	
	}
	
	*pBuff = DR;
	pRxBuffer++;
	Rxlen --;
	
	
	if( len == 0)
	{
	    close the I2C data reception and notify the application.
		// generate th stop condition 
		// close the i2c rx 
		// Notify the applicaiton
	}


}



}

I2C_CloseSendData 
{

 // diable ITBUFFN 
 ITEVEN 
 
 I2CReady;
 NULL;
 TxLen = 0;

}

CloseReceiveData()
{
  //disable interrupts ITBUFFEN Control bit
  disale ITEVFEN control bit 
 txrxState = ready 
 buffer - NUll;
 rxLen = -;
 rxZIze = 0;
 enable Acking.
  
}


void I2C_ER_IRQHandkling(I2C_Handle_t *pI2Chandle);
{

//bus error flag,
clear the bus error 
and implement o noifyt BERR:


}

#########Testing

I2C IRQ COnfiguraont 
I2C+IRQPriorityCOnfig(== enable);
Error, Enable 



0x51 - 

i2cSendDataIT -- while !=ReADY 
 != 
I2CMasterReceiveDataIT  -- Handle, 
!=I2CReady;

















































































