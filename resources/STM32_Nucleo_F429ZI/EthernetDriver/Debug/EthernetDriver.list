
EthernetDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001030  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080011dc  080011dc  000021dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011fc  080011fc  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  080011fc  080011fc  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011fc  080011fc  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011fc  080011fc  000021fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001200  08001200  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001204  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          00000170  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00003060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a1c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007a5  00000000  00000000  00004aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00005258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000155  00000000  00000000  00005450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db0a  00000000  00000000  000055a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003bc8  00000000  00000000  000230af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a79c  00000000  00000000  00026c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c1413  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c3c  00000000  00000000  000c1458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  000c2094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080011c4 	.word	0x080011c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000064 	.word	0x20000064
 80001e8:	080011c4 	.word	0x080011c4

080001ec <leds_init>:

#include "main.h"
#include "leds.h"

void leds_init(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	//Leds are GPIO output module.
	//enable clock access to Leds Port

	RCC->AHB1ENR |= (1U <<1);
 80001f0:	4b17      	ldr	r3, [pc, #92]	@ (8000250 <leds_init+0x64>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f4:	4a16      	ldr	r2, [pc, #88]	@ (8000250 <leds_init+0x64>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6313      	str	r3, [r2, #48]	@ 0x30

	// configure LEDS pin as output.

	//Green LED Output mode.
	GPIOB->MODER |= (1U <<0);
 80001fc:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <leds_init+0x68>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a14      	ldr	r2, [pc, #80]	@ (8000254 <leds_init+0x68>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  &= ~(1U <<1);
 8000208:	4b12      	ldr	r3, [pc, #72]	@ (8000254 <leds_init+0x68>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a11      	ldr	r2, [pc, #68]	@ (8000254 <leds_init+0x68>)
 800020e:	f023 0302 	bic.w	r3, r3, #2
 8000212:	6013      	str	r3, [r2, #0]

	//Blue LED output mode.Moder pin 7
	GPIOB->MODER |= (1u <<14);
 8000214:	4b0f      	ldr	r3, [pc, #60]	@ (8000254 <leds_init+0x68>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0e      	ldr	r2, [pc, #56]	@ (8000254 <leds_init+0x68>)
 800021a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800021e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  &= ~(1U <<15);
 8000220:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <leds_init+0x68>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0b      	ldr	r2, [pc, #44]	@ (8000254 <leds_init+0x68>)
 8000226:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800022a:	6013      	str	r3, [r2, #0]


	//Red LED output mode. Moder pin 14
	GPIOB->MODER |= (1u <<28);
 800022c:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <leds_init+0x68>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <leds_init+0x68>)
 8000232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000236:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  &= ~(1U <<29);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <leds_init+0x68>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a05      	ldr	r2, [pc, #20]	@ (8000254 <leds_init+0x68>)
 800023e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000242:	6013      	str	r3, [r2, #0]

}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40023800 	.word	0x40023800
 8000254:	40020400 	.word	0x40020400

08000258 <led_on>:

void led_on(uint32_t led)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	switch(led)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000266:	d018      	beq.n	800029a <led_on+0x42>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800026e:	d81b      	bhi.n	80002a8 <led_on+0x50>
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d003      	beq.n	800027e <led_on+0x26>
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b80      	cmp	r3, #128	@ 0x80
 800027a:	d007      	beq.n	800028c <led_on+0x34>
	case RED_LED:
		GPIOB->ODR |= RED_LED;
		break;
	}

}
 800027c:	e014      	b.n	80002a8 <led_on+0x50>
		GPIOB->ODR |= GREEN_LED;
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <led_on+0x5c>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a0c      	ldr	r2, [pc, #48]	@ (80002b4 <led_on+0x5c>)
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6153      	str	r3, [r2, #20]
		break;
 800028a:	e00d      	b.n	80002a8 <led_on+0x50>
		GPIOB->ODR |= BLUE_LED;
 800028c:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <led_on+0x5c>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a08      	ldr	r2, [pc, #32]	@ (80002b4 <led_on+0x5c>)
 8000292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000296:	6153      	str	r3, [r2, #20]
		break;
 8000298:	e006      	b.n	80002a8 <led_on+0x50>
		GPIOB->ODR |= RED_LED;
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <led_on+0x5c>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	4a05      	ldr	r2, [pc, #20]	@ (80002b4 <led_on+0x5c>)
 80002a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002a4:	6153      	str	r3, [r2, #20]
		break;
 80002a6:	bf00      	nop
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40020400 	.word	0x40020400

080002b8 <led_off>:
void led_off(uint32_t led)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	switch(led)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80002c6:	d018      	beq.n	80002fa <led_off+0x42>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80002ce:	d81b      	bhi.n	8000308 <led_off+0x50>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d003      	beq.n	80002de <led_off+0x26>
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2b80      	cmp	r3, #128	@ 0x80
 80002da:	d007      	beq.n	80002ec <led_off+0x34>
	case RED_LED:
		GPIOB->ODR &= ~RED_LED;
		break;
	}

}
 80002dc:	e014      	b.n	8000308 <led_off+0x50>
		GPIOB->ODR &= ~GREEN_LED;
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <led_off+0x5c>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000314 <led_off+0x5c>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6153      	str	r3, [r2, #20]
		break;
 80002ea:	e00d      	b.n	8000308 <led_off+0x50>
		GPIOB->ODR &= ~BLUE_LED;
 80002ec:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <led_off+0x5c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a08      	ldr	r2, [pc, #32]	@ (8000314 <led_off+0x5c>)
 80002f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002f6:	6153      	str	r3, [r2, #20]
		break;
 80002f8:	e006      	b.n	8000308 <led_off+0x50>
		GPIOB->ODR &= ~RED_LED;
 80002fa:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <led_off+0x5c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a05      	ldr	r2, [pc, #20]	@ (8000314 <led_off+0x5c>)
 8000300:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000304:	6153      	str	r3, [r2, #20]
		break;
 8000306:	bf00      	nop
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40020400 	.word	0x40020400

08000318 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#endif

int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	clock_config();
 800031c:	f000 f934 	bl	8000588 <clock_config>
	leds_init();
 8000320:	f7ff ff64 	bl	80001ec <leds_init>
	timebase_init();
 8000324:	f000 f916 	bl	8000554 <timebase_init>
    uart3_tx_init();
 8000328:	f000 f996 	bl	8000658 <uart3_tx_init>

	/* Loop forever */
	for(;;)
	{
		printf("SJ.. leds on\r\n");
 800032c:	4811      	ldr	r0, [pc, #68]	@ (8000374 <main+0x5c>)
 800032e:	f000 fbbb 	bl	8000aa8 <puts>
		led_on(RED_LED);
 8000332:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000336:	f7ff ff8f 	bl	8000258 <led_on>
		led_on(GREEN_LED);
 800033a:	2001      	movs	r0, #1
 800033c:	f7ff ff8c 	bl	8000258 <led_on>
		led_on(BLUE_LED);
 8000340:	2080      	movs	r0, #128	@ 0x80
 8000342:	f7ff ff89 	bl	8000258 <led_on>

		delay_ms(1000);
 8000346:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800034a:	f000 f8e1 	bl	8000510 <delay_ms>

		led_off(RED_LED);
 800034e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000352:	f7ff ffb1 	bl	80002b8 <led_off>
		led_off(GREEN_LED);
 8000356:	2001      	movs	r0, #1
 8000358:	f7ff ffae 	bl	80002b8 <led_off>
		led_off(BLUE_LED);
 800035c:	2080      	movs	r0, #128	@ 0x80
 800035e:	f7ff ffab 	bl	80002b8 <led_off>
		printf("SJ.. leds off\r\n");
 8000362:	4805      	ldr	r0, [pc, #20]	@ (8000378 <main+0x60>)
 8000364:	f000 fba0 	bl	8000aa8 <puts>
		delay_ms(1000);
 8000368:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800036c:	f000 f8d0 	bl	8000510 <delay_ms>
		printf("SJ.. leds on\r\n");
 8000370:	bf00      	nop
 8000372:	e7db      	b.n	800032c <main+0x14>
 8000374:	080011dc 	.word	0x080011dc
 8000378:	080011ec 	.word	0x080011ec

0800037c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	e00a      	b.n	80003a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800038e:	f3af 8000 	nop.w
 8000392:	4601      	mov	r1, r0
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	60ba      	str	r2, [r7, #8]
 800039a:	b2ca      	uxtb	r2, r1
 800039c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dbf0      	blt.n	800038e <_read+0x12>
  }

  return len;
 80003ac:	687b      	ldr	r3, [r7, #4]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	60f8      	str	r0, [r7, #12]
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e009      	b.n	80003dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	1c5a      	adds	r2, r3, #1
 80003cc:	60ba      	str	r2, [r7, #8]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f933 	bl	800063c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	3301      	adds	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbf1      	blt.n	80003c8 <_write+0x12>
  }
  return len;
 80003e4:	687b      	ldr	r3, [r7, #4]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <_close>:

int _close(int file)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000416:	605a      	str	r2, [r3, #4]
  return 0;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <_isatty>:

int _isatty(int file)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000458:	b480      	push	{r7}
 800045a:	b087      	sub	sp, #28
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000460:	4a14      	ldr	r2, [pc, #80]	@ (80004b4 <_sbrk+0x5c>)
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <_sbrk+0x60>)
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800046c:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <_sbrk+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <_sbrk+0x64>)
 8000476:	4a12      	ldr	r2, [pc, #72]	@ (80004c0 <_sbrk+0x68>)
 8000478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800047a:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <_sbrk+0x64>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	429a      	cmp	r2, r3
 8000486:	d205      	bcs.n	8000494 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000488:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <_sbrk+0x6c>)
 800048a:	220c      	movs	r2, #12
 800048c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	e009      	b.n	80004a8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000494:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a06      	ldr	r2, [pc, #24]	@ (80004bc <_sbrk+0x64>)
 80004a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a6:	68fb      	ldr	r3, [r7, #12]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	371c      	adds	r7, #28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	20030000 	.word	0x20030000
 80004b8:	00000400 	.word	0x00000400
 80004bc:	2000007c 	.word	0x2000007c
 80004c0:	200001d0 	.word	0x200001d0
 80004c4:	200001c0 	.word	0x200001c0

080004c8 <tick_increment>:

uint32_t g_curr_tick;
uint32_t tick_freq = 1;

void tick_increment(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	g_curr_tick += tick_freq;
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <tick_increment+0x1c>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <tick_increment+0x20>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4413      	add	r3, r2
 80004d6:	4a03      	ldr	r2, [pc, #12]	@ (80004e4 <tick_increment+0x1c>)
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	20000080 	.word	0x20000080
 80004e8:	20000000 	.word	0x20000000

080004ec <get_tick>:

uint32_t get_tick(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	return g_curr_tick;
 80004f0:	4b03      	ldr	r3, [pc, #12]	@ (8000500 <get_tick+0x14>)
 80004f2:	681b      	ldr	r3, [r3, #0]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000080 	.word	0x20000080

08000504 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	tick_increment();
 8000508:	f7ff ffde 	bl	80004c8 <tick_increment>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <delay_ms>:

void delay_ms(uint32_t delay)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8000518:	f7ff ffe8 	bl	80004ec <get_tick>
 800051c:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000528:	d004      	beq.n	8000534 <delay_ms+0x24>
	{
			wait += (uint32_t)(tick_freq);
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <delay_ms+0x40>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	4413      	add	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
	}

	while((get_tick() - tickstart) < wait){}
 8000534:	bf00      	nop
 8000536:	f7ff ffd9 	bl	80004ec <get_tick>
 800053a:	4602      	mov	r2, r0
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	429a      	cmp	r2, r3
 8000544:	d8f7      	bhi.n	8000536 <delay_ms+0x26>


}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000

08000554 <timebase_init>:

void timebase_init(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	/*Reload the timer with number of clocks per millisecond*/
	SysTick->LOAD = ONE_MSEC_LOAD - 1;
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <timebase_init+0x2c>)
 800055a:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <timebase_init+0x30>)
 800055c:	605a      	str	r2, [r3, #4]

	/*Clear SysTick current value register*/
	SysTick->VAL = 0;
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <timebase_init+0x2c>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]

    /*Enable systick and select clk src as internal*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLCKSRC ;
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <timebase_init+0x2c>)
 8000566:	2205      	movs	r2, #5
 8000568:	601a      	str	r2, [r3, #0]

	/*Enable systick interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <timebase_init+0x2c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <timebase_init+0x2c>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6013      	str	r3, [r2, #0]


}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000e010 	.word	0xe000e010
 8000584:	0002903f 	.word	0x0002903f

08000588 <clock_config>:


void clock_config(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
    // Enable HSE
    RCC->CR |= RCC_CR_HSEON;
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <clock_config+0xa4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a26      	ldr	r2, [pc, #152]	@ (800062c <clock_config+0xa4>)
 8000592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000596:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 8000598:	bf00      	nop
 800059a:	4b24      	ldr	r3, [pc, #144]	@ (800062c <clock_config+0xa4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <clock_config+0x12>

    // Enable Power interface clock
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005a6:	4b21      	ldr	r3, [pc, #132]	@ (800062c <clock_config+0xa4>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005aa:	4a20      	ldr	r2, [pc, #128]	@ (800062c <clock_config+0xa4>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure Voltage Regulator to Scale 1 mode (necessary for higher clock speeds)
    PWR->CR |= PWR_CR_VOS_0; // VOS scale 1 mode
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <clock_config+0xa8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000630 <clock_config+0xa8>)
 80005b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005bc:	6013      	str	r3, [r2, #0]

    // Set AHB Prescaler to 1 (HCLK = SYSCLK)
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005be:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <clock_config+0xa4>)
 80005c0:	4a1a      	ldr	r2, [pc, #104]	@ (800062c <clock_config+0xa4>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	6093      	str	r3, [r2, #8]

    // Set APB1 Prescaler to 4 (PCLK1 = 42 MHz)
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005c6:	4b19      	ldr	r3, [pc, #100]	@ (800062c <clock_config+0xa4>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	4a18      	ldr	r2, [pc, #96]	@ (800062c <clock_config+0xa4>)
 80005cc:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80005d0:	6093      	str	r3, [r2, #8]

    // Set APB2 Prescaler to 2 (PCLK2 = 84 MHz)
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005d2:	4b16      	ldr	r3, [pc, #88]	@ (800062c <clock_config+0xa4>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	4a15      	ldr	r2, [pc, #84]	@ (800062c <clock_config+0xa4>)
 80005d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005dc:	6093      	str	r3, [r2, #8]

    // Configure PLL: HSE as PLL source, PLLM = 8, PLLN = 336, PLLP = 2, PLLQ = 7
    RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE |
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <clock_config+0xa4>)
 80005e0:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <clock_config+0xac>)
 80005e2:	605a      	str	r2, [r3, #4]
                   (336 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos) |  // PLLP = 2 (00b)
                   (7 << RCC_PLLCFGR_PLLQ_Pos);

    // Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 80005e4:	4b11      	ldr	r3, [pc, #68]	@ (800062c <clock_config+0xa4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a10      	ldr	r2, [pc, #64]	@ (800062c <clock_config+0xa4>)
 80005ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ee:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY)); // Wait until PLL is ready
 80005f0:	bf00      	nop
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <clock_config+0xa4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <clock_config+0x6a>

    // Set Flash latency to 5 wait states for 168 MHz
    FLASH->ACR = FLASH_ACR_LATENCY_5WS;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <clock_config+0xb0>)
 8000600:	2205      	movs	r2, #5
 8000602:	601a      	str	r2, [r3, #0]

    // Select PLL as system clock source
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000604:	4b09      	ldr	r3, [pc, #36]	@ (800062c <clock_config+0xa4>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	4a08      	ldr	r2, [pc, #32]	@ (800062c <clock_config+0xa4>)
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL); // Wait until PLL is system clock source
 8000610:	bf00      	nop
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <clock_config+0xa4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	2b08      	cmp	r3, #8
 800061c:	d1f9      	bne.n	8000612 <clock_config+0x8a>
}
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000
 8000634:	07405408 	.word	0x07405408
 8000638:	40023c00 	.word	0x40023c00

0800063c <__io_putchar>:

static void uart_write(uint8_t value);


int __io_putchar(int ch)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
   uart_write(ch);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f89d 	bl	8000788 <uart_write>
   return ch;
 800064e:	687b      	ldr	r3, [r7, #4]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <uart3_tx_init>:


void uart3_tx_init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  // PD 8 USART3_TX AF7
  // PD 9 USART3_RX AF7

	//Enable clock access to UART 3 port D.
    RCC->AHB1ENR |= GPIODEN;
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <uart3_tx_init+0x98>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000660:	4a23      	ldr	r2, [pc, #140]	@ (80006f0 <uart3_tx_init+0x98>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6313      	str	r3, [r2, #48]	@ 0x30

    // GPIOD_MODER - AF - 10
    // Bit 16 and Bit 17 // 10

    GPIOD->MODER &= ~(1U <<16);
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <uart3_tx_init+0x9c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <uart3_tx_init+0x9c>)
 800066e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000672:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (1U <<17);
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <uart3_tx_init+0x9c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <uart3_tx_init+0x9c>)
 800067a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800067e:	6013      	str	r3, [r2, #0]

    // GPIO AF High register.
    // AF7 -- 0111:
    // set Alternate function high

    GPIOD->AFR[1] |= (1U <<0);
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <uart3_tx_init+0x9c>)
 8000682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000684:	4a1b      	ldr	r2, [pc, #108]	@ (80006f4 <uart3_tx_init+0x9c>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOD->AFR[1] |= (1U <<1);
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <uart3_tx_init+0x9c>)
 800068e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000690:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <uart3_tx_init+0x9c>)
 8000692:	f043 0302 	orr.w	r3, r3, #2
 8000696:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOD->AFR[1] |= (1U <<2);
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <uart3_tx_init+0x9c>)
 800069a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069c:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <uart3_tx_init+0x9c>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOD->AFR[1] &= ~(1U <<3);
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <uart3_tx_init+0x9c>)
 80006a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a8:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <uart3_tx_init+0x9c>)
 80006aa:	f023 0308 	bic.w	r3, r3, #8
 80006ae:	6253      	str	r3, [r2, #36]	@ 0x24

    // Enable clock access to UART3
    RCC->APB1ENR |= USART3EN;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <uart3_tx_init+0x98>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <uart3_tx_init+0x98>)
 80006b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40

    // configure UART parameters
    // set baudrate
    // enable uart3 module

    config_uart_parameters(USART3, UART_DATAWIDTH_8B,UART_PARITY_NONE, UART_STOPBITS_1);
 80006bc:	2300      	movs	r3, #0
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <uart3_tx_init+0xa0>)
 80006c4:	f000 f81c 	bl	8000700 <config_uart_parameters>

    // set baud rate
    uart_set_baudrate(APB1_CLOCK ,SYS_BAUDRATE);
 80006c8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <uart3_tx_init+0xa4>)
 80006ce:	f000 f849 	bl	8000764 <uart_set_baudrate>
    // Set transfer direction
    //TE enable.

    USART3->CR1 |= TX_EN;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <uart3_tx_init+0xa0>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <uart3_tx_init+0xa0>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	60d3      	str	r3, [r2, #12]

    // enable usart 3 module
    USART3->CR1 |= UART3_EN;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <uart3_tx_init+0xa0>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <uart3_tx_init+0xa0>)
 80006e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006e8:	60d3      	str	r3, [r2, #12]

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	40004800 	.word	0x40004800
 80006fc:	0280de80 	.word	0x0280de80

08000700 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth,uint32_t Parity, uint32_t StopBits)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	f423 52b0 	bic.w	r2, r3, #5632	@ 0x1600
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	430b      	orrs	r3, r1
 800071c:	431a      	orrs	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	60da      	str	r2, [r3, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	431a      	orrs	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	611a      	str	r2, [r3, #16]
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <compute_uart_div>:

static uint32_t compute_uart_div(uint32_t peripclk, uint32_t baudRate)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
    return ((peripclk + (baudRate / 2U)) / baudRate);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	085a      	lsrs	r2, r3, #1
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	441a      	add	r2, r3
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t peripclk, uint32_t baudRate)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	USART3->BRR = compute_uart_div(peripclk, baudRate);
 800076e:	4c05      	ldr	r4, [pc, #20]	@ (8000784 <uart_set_baudrate+0x20>)
 8000770:	6839      	ldr	r1, [r7, #0]
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffe3 	bl	800073e <compute_uart_div>
 8000778:	4603      	mov	r3, r0
 800077a:	60a3      	str	r3, [r4, #8]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	40004800 	.word	0x40004800

08000788 <uart_write>:

static void uart_write(uint8_t value)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	//make sure Transmit Data register is empty
	// TxE bit.

	while(!(USART3->SR & (1U <<7)))
 8000792:	bf00      	nop
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <uart_write+0x2c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0f9      	beq.n	8000794 <uart_write+0xc>
	{
		//stuck here or not
		// Wait here until TxE bit is set here.
	}
	USART3->DR = value;
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <uart_write+0x2c>)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	6053      	str	r3, [r2, #4]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40004800 	.word	0x40004800

080007b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b8:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007bc:	f000 f826 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	@ (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007e6:	f000 fa8d 	bl	8000d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ea:	f7ff fd95 	bl	8000318 <main>

080007ee <LoopForever>:

LoopForever:
  b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   r0, =_estack
 80007f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007fc:	08001204 	.word	0x08001204
  ldr r2, =_sbss
 8000800:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000804:	200001d0 	.word	0x200001d0

08000808 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC_IRQHandler>
	...

0800080c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <SystemInit+0x60>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000816:	4a15      	ldr	r2, [pc, #84]	@ (800086c <SystemInit+0x60>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <SystemInit+0x64>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <SystemInit+0x64>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800082c:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <SystemInit+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <SystemInit+0x64>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a0e      	ldr	r2, [pc, #56]	@ (8000870 <SystemInit+0x64>)
 8000838:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800083c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000840:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <SystemInit+0x64>)
 8000844:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <SystemInit+0x68>)
 8000846:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <SystemInit+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <SystemInit+0x64>)
 800084e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000852:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <SystemInit+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <SystemInit+0x60>)
 800085c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000860:	609a      	str	r2, [r3, #8]
#endif
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	40023800 	.word	0x40023800
 8000874:	24003010 	.word	0x24003010

08000878 <std>:
 8000878:	2300      	movs	r3, #0
 800087a:	b510      	push	{r4, lr}
 800087c:	4604      	mov	r4, r0
 800087e:	e9c0 3300 	strd	r3, r3, [r0]
 8000882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000886:	6083      	str	r3, [r0, #8]
 8000888:	8181      	strh	r1, [r0, #12]
 800088a:	6643      	str	r3, [r0, #100]	@ 0x64
 800088c:	81c2      	strh	r2, [r0, #14]
 800088e:	6183      	str	r3, [r0, #24]
 8000890:	4619      	mov	r1, r3
 8000892:	2208      	movs	r2, #8
 8000894:	305c      	adds	r0, #92	@ 0x5c
 8000896:	f000 f9e7 	bl	8000c68 <memset>
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <std+0x58>)
 800089c:	6263      	str	r3, [r4, #36]	@ 0x24
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <std+0x5c>)
 80008a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <std+0x60>)
 80008a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <std+0x64>)
 80008a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <std+0x68>)
 80008ac:	6224      	str	r4, [r4, #32]
 80008ae:	429c      	cmp	r4, r3
 80008b0:	d006      	beq.n	80008c0 <std+0x48>
 80008b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80008b6:	4294      	cmp	r4, r2
 80008b8:	d002      	beq.n	80008c0 <std+0x48>
 80008ba:	33d0      	adds	r3, #208	@ 0xd0
 80008bc:	429c      	cmp	r4, r3
 80008be:	d105      	bne.n	80008cc <std+0x54>
 80008c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80008c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c8:	f000 ba40 	b.w	8000d4c <__retarget_lock_init_recursive>
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	bf00      	nop
 80008d0:	08000ab9 	.word	0x08000ab9
 80008d4:	08000adb 	.word	0x08000adb
 80008d8:	08000b13 	.word	0x08000b13
 80008dc:	08000b37 	.word	0x08000b37
 80008e0:	20000084 	.word	0x20000084

080008e4 <stdio_exit_handler>:
 80008e4:	4a02      	ldr	r2, [pc, #8]	@ (80008f0 <stdio_exit_handler+0xc>)
 80008e6:	4903      	ldr	r1, [pc, #12]	@ (80008f4 <stdio_exit_handler+0x10>)
 80008e8:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <stdio_exit_handler+0x14>)
 80008ea:	f000 b869 	b.w	80009c0 <_fwalk_sglue>
 80008ee:	bf00      	nop
 80008f0:	20000004 	.word	0x20000004
 80008f4:	0800104d 	.word	0x0800104d
 80008f8:	20000014 	.word	0x20000014

080008fc <cleanup_stdio>:
 80008fc:	6841      	ldr	r1, [r0, #4]
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <cleanup_stdio+0x34>)
 8000900:	4299      	cmp	r1, r3
 8000902:	b510      	push	{r4, lr}
 8000904:	4604      	mov	r4, r0
 8000906:	d001      	beq.n	800090c <cleanup_stdio+0x10>
 8000908:	f000 fba0 	bl	800104c <_fflush_r>
 800090c:	68a1      	ldr	r1, [r4, #8]
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <cleanup_stdio+0x38>)
 8000910:	4299      	cmp	r1, r3
 8000912:	d002      	beq.n	800091a <cleanup_stdio+0x1e>
 8000914:	4620      	mov	r0, r4
 8000916:	f000 fb99 	bl	800104c <_fflush_r>
 800091a:	68e1      	ldr	r1, [r4, #12]
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <cleanup_stdio+0x3c>)
 800091e:	4299      	cmp	r1, r3
 8000920:	d004      	beq.n	800092c <cleanup_stdio+0x30>
 8000922:	4620      	mov	r0, r4
 8000924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000928:	f000 bb90 	b.w	800104c <_fflush_r>
 800092c:	bd10      	pop	{r4, pc}
 800092e:	bf00      	nop
 8000930:	20000084 	.word	0x20000084
 8000934:	200000ec 	.word	0x200000ec
 8000938:	20000154 	.word	0x20000154

0800093c <global_stdio_init.part.0>:
 800093c:	b510      	push	{r4, lr}
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <global_stdio_init.part.0+0x30>)
 8000940:	4c0b      	ldr	r4, [pc, #44]	@ (8000970 <global_stdio_init.part.0+0x34>)
 8000942:	4a0c      	ldr	r2, [pc, #48]	@ (8000974 <global_stdio_init.part.0+0x38>)
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	4620      	mov	r0, r4
 8000948:	2200      	movs	r2, #0
 800094a:	2104      	movs	r1, #4
 800094c:	f7ff ff94 	bl	8000878 <std>
 8000950:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000954:	2201      	movs	r2, #1
 8000956:	2109      	movs	r1, #9
 8000958:	f7ff ff8e 	bl	8000878 <std>
 800095c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000960:	2202      	movs	r2, #2
 8000962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000966:	2112      	movs	r1, #18
 8000968:	f7ff bf86 	b.w	8000878 <std>
 800096c:	200001bc 	.word	0x200001bc
 8000970:	20000084 	.word	0x20000084
 8000974:	080008e5 	.word	0x080008e5

08000978 <__sfp_lock_acquire>:
 8000978:	4801      	ldr	r0, [pc, #4]	@ (8000980 <__sfp_lock_acquire+0x8>)
 800097a:	f000 b9e8 	b.w	8000d4e <__retarget_lock_acquire_recursive>
 800097e:	bf00      	nop
 8000980:	200001c5 	.word	0x200001c5

08000984 <__sfp_lock_release>:
 8000984:	4801      	ldr	r0, [pc, #4]	@ (800098c <__sfp_lock_release+0x8>)
 8000986:	f000 b9e3 	b.w	8000d50 <__retarget_lock_release_recursive>
 800098a:	bf00      	nop
 800098c:	200001c5 	.word	0x200001c5

08000990 <__sinit>:
 8000990:	b510      	push	{r4, lr}
 8000992:	4604      	mov	r4, r0
 8000994:	f7ff fff0 	bl	8000978 <__sfp_lock_acquire>
 8000998:	6a23      	ldr	r3, [r4, #32]
 800099a:	b11b      	cbz	r3, 80009a4 <__sinit+0x14>
 800099c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009a0:	f7ff bff0 	b.w	8000984 <__sfp_lock_release>
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <__sinit+0x28>)
 80009a6:	6223      	str	r3, [r4, #32]
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <__sinit+0x2c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1f5      	bne.n	800099c <__sinit+0xc>
 80009b0:	f7ff ffc4 	bl	800093c <global_stdio_init.part.0>
 80009b4:	e7f2      	b.n	800099c <__sinit+0xc>
 80009b6:	bf00      	nop
 80009b8:	080008fd 	.word	0x080008fd
 80009bc:	200001bc 	.word	0x200001bc

080009c0 <_fwalk_sglue>:
 80009c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009c4:	4607      	mov	r7, r0
 80009c6:	4688      	mov	r8, r1
 80009c8:	4614      	mov	r4, r2
 80009ca:	2600      	movs	r6, #0
 80009cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009d0:	f1b9 0901 	subs.w	r9, r9, #1
 80009d4:	d505      	bpl.n	80009e2 <_fwalk_sglue+0x22>
 80009d6:	6824      	ldr	r4, [r4, #0]
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d1f7      	bne.n	80009cc <_fwalk_sglue+0xc>
 80009dc:	4630      	mov	r0, r6
 80009de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009e2:	89ab      	ldrh	r3, [r5, #12]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d907      	bls.n	80009f8 <_fwalk_sglue+0x38>
 80009e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009ec:	3301      	adds	r3, #1
 80009ee:	d003      	beq.n	80009f8 <_fwalk_sglue+0x38>
 80009f0:	4629      	mov	r1, r5
 80009f2:	4638      	mov	r0, r7
 80009f4:	47c0      	blx	r8
 80009f6:	4306      	orrs	r6, r0
 80009f8:	3568      	adds	r5, #104	@ 0x68
 80009fa:	e7e9      	b.n	80009d0 <_fwalk_sglue+0x10>

080009fc <_puts_r>:
 80009fc:	6a03      	ldr	r3, [r0, #32]
 80009fe:	b570      	push	{r4, r5, r6, lr}
 8000a00:	6884      	ldr	r4, [r0, #8]
 8000a02:	4605      	mov	r5, r0
 8000a04:	460e      	mov	r6, r1
 8000a06:	b90b      	cbnz	r3, 8000a0c <_puts_r+0x10>
 8000a08:	f7ff ffc2 	bl	8000990 <__sinit>
 8000a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a0e:	07db      	lsls	r3, r3, #31
 8000a10:	d405      	bmi.n	8000a1e <_puts_r+0x22>
 8000a12:	89a3      	ldrh	r3, [r4, #12]
 8000a14:	0598      	lsls	r0, r3, #22
 8000a16:	d402      	bmi.n	8000a1e <_puts_r+0x22>
 8000a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a1a:	f000 f998 	bl	8000d4e <__retarget_lock_acquire_recursive>
 8000a1e:	89a3      	ldrh	r3, [r4, #12]
 8000a20:	0719      	lsls	r1, r3, #28
 8000a22:	d502      	bpl.n	8000a2a <_puts_r+0x2e>
 8000a24:	6923      	ldr	r3, [r4, #16]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d135      	bne.n	8000a96 <_puts_r+0x9a>
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	f000 f8c5 	bl	8000bbc <__swsetup_r>
 8000a32:	b380      	cbz	r0, 8000a96 <_puts_r+0x9a>
 8000a34:	f04f 35ff 	mov.w	r5, #4294967295
 8000a38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a3a:	07da      	lsls	r2, r3, #31
 8000a3c:	d405      	bmi.n	8000a4a <_puts_r+0x4e>
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	059b      	lsls	r3, r3, #22
 8000a42:	d402      	bmi.n	8000a4a <_puts_r+0x4e>
 8000a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a46:	f000 f983 	bl	8000d50 <__retarget_lock_release_recursive>
 8000a4a:	4628      	mov	r0, r5
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da04      	bge.n	8000a5c <_puts_r+0x60>
 8000a52:	69a2      	ldr	r2, [r4, #24]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dc17      	bgt.n	8000a88 <_puts_r+0x8c>
 8000a58:	290a      	cmp	r1, #10
 8000a5a:	d015      	beq.n	8000a88 <_puts_r+0x8c>
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	6022      	str	r2, [r4, #0]
 8000a62:	7019      	strb	r1, [r3, #0]
 8000a64:	68a3      	ldr	r3, [r4, #8]
 8000a66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	60a3      	str	r3, [r4, #8]
 8000a6e:	2900      	cmp	r1, #0
 8000a70:	d1ed      	bne.n	8000a4e <_puts_r+0x52>
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da11      	bge.n	8000a9a <_puts_r+0x9e>
 8000a76:	4622      	mov	r2, r4
 8000a78:	210a      	movs	r1, #10
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	f000 f85f 	bl	8000b3e <__swbuf_r>
 8000a80:	3001      	adds	r0, #1
 8000a82:	d0d7      	beq.n	8000a34 <_puts_r+0x38>
 8000a84:	250a      	movs	r5, #10
 8000a86:	e7d7      	b.n	8000a38 <_puts_r+0x3c>
 8000a88:	4622      	mov	r2, r4
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 f857 	bl	8000b3e <__swbuf_r>
 8000a90:	3001      	adds	r0, #1
 8000a92:	d1e7      	bne.n	8000a64 <_puts_r+0x68>
 8000a94:	e7ce      	b.n	8000a34 <_puts_r+0x38>
 8000a96:	3e01      	subs	r6, #1
 8000a98:	e7e4      	b.n	8000a64 <_puts_r+0x68>
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	6022      	str	r2, [r4, #0]
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	e7ee      	b.n	8000a84 <_puts_r+0x88>
	...

08000aa8 <puts>:
 8000aa8:	4b02      	ldr	r3, [pc, #8]	@ (8000ab4 <puts+0xc>)
 8000aaa:	4601      	mov	r1, r0
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	f7ff bfa5 	b.w	80009fc <_puts_r>
 8000ab2:	bf00      	nop
 8000ab4:	20000010 	.word	0x20000010

08000ab8 <__sread>:
 8000ab8:	b510      	push	{r4, lr}
 8000aba:	460c      	mov	r4, r1
 8000abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac0:	f000 f8fc 	bl	8000cbc <_read_r>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	bfab      	itete	ge
 8000ac8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000aca:	89a3      	ldrhlt	r3, [r4, #12]
 8000acc:	181b      	addge	r3, r3, r0
 8000ace:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ad2:	bfac      	ite	ge
 8000ad4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ad6:	81a3      	strhlt	r3, [r4, #12]
 8000ad8:	bd10      	pop	{r4, pc}

08000ada <__swrite>:
 8000ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ade:	461f      	mov	r7, r3
 8000ae0:	898b      	ldrh	r3, [r1, #12]
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	460c      	mov	r4, r1
 8000ae8:	4616      	mov	r6, r2
 8000aea:	d505      	bpl.n	8000af8 <__swrite+0x1e>
 8000aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000af0:	2302      	movs	r3, #2
 8000af2:	2200      	movs	r2, #0
 8000af4:	f000 f8d0 	bl	8000c98 <_lseek_r>
 8000af8:	89a3      	ldrh	r3, [r4, #12]
 8000afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b02:	81a3      	strh	r3, [r4, #12]
 8000b04:	4632      	mov	r2, r6
 8000b06:	463b      	mov	r3, r7
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b0e:	f000 b8e7 	b.w	8000ce0 <_write_r>

08000b12 <__sseek>:
 8000b12:	b510      	push	{r4, lr}
 8000b14:	460c      	mov	r4, r1
 8000b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b1a:	f000 f8bd 	bl	8000c98 <_lseek_r>
 8000b1e:	1c43      	adds	r3, r0, #1
 8000b20:	89a3      	ldrh	r3, [r4, #12]
 8000b22:	bf15      	itete	ne
 8000b24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000b2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b2e:	81a3      	strheq	r3, [r4, #12]
 8000b30:	bf18      	it	ne
 8000b32:	81a3      	strhne	r3, [r4, #12]
 8000b34:	bd10      	pop	{r4, pc}

08000b36 <__sclose>:
 8000b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b3a:	f000 b89d 	b.w	8000c78 <_close_r>

08000b3e <__swbuf_r>:
 8000b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b40:	460e      	mov	r6, r1
 8000b42:	4614      	mov	r4, r2
 8000b44:	4605      	mov	r5, r0
 8000b46:	b118      	cbz	r0, 8000b50 <__swbuf_r+0x12>
 8000b48:	6a03      	ldr	r3, [r0, #32]
 8000b4a:	b90b      	cbnz	r3, 8000b50 <__swbuf_r+0x12>
 8000b4c:	f7ff ff20 	bl	8000990 <__sinit>
 8000b50:	69a3      	ldr	r3, [r4, #24]
 8000b52:	60a3      	str	r3, [r4, #8]
 8000b54:	89a3      	ldrh	r3, [r4, #12]
 8000b56:	071a      	lsls	r2, r3, #28
 8000b58:	d501      	bpl.n	8000b5e <__swbuf_r+0x20>
 8000b5a:	6923      	ldr	r3, [r4, #16]
 8000b5c:	b943      	cbnz	r3, 8000b70 <__swbuf_r+0x32>
 8000b5e:	4621      	mov	r1, r4
 8000b60:	4628      	mov	r0, r5
 8000b62:	f000 f82b 	bl	8000bbc <__swsetup_r>
 8000b66:	b118      	cbz	r0, 8000b70 <__swbuf_r+0x32>
 8000b68:	f04f 37ff 	mov.w	r7, #4294967295
 8000b6c:	4638      	mov	r0, r7
 8000b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	6922      	ldr	r2, [r4, #16]
 8000b74:	1a98      	subs	r0, r3, r2
 8000b76:	6963      	ldr	r3, [r4, #20]
 8000b78:	b2f6      	uxtb	r6, r6
 8000b7a:	4283      	cmp	r3, r0
 8000b7c:	4637      	mov	r7, r6
 8000b7e:	dc05      	bgt.n	8000b8c <__swbuf_r+0x4e>
 8000b80:	4621      	mov	r1, r4
 8000b82:	4628      	mov	r0, r5
 8000b84:	f000 fa62 	bl	800104c <_fflush_r>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d1ed      	bne.n	8000b68 <__swbuf_r+0x2a>
 8000b8c:	68a3      	ldr	r3, [r4, #8]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	60a3      	str	r3, [r4, #8]
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	6022      	str	r2, [r4, #0]
 8000b98:	701e      	strb	r6, [r3, #0]
 8000b9a:	6962      	ldr	r2, [r4, #20]
 8000b9c:	1c43      	adds	r3, r0, #1
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__swbuf_r+0x6e>
 8000ba2:	89a3      	ldrh	r3, [r4, #12]
 8000ba4:	07db      	lsls	r3, r3, #31
 8000ba6:	d5e1      	bpl.n	8000b6c <__swbuf_r+0x2e>
 8000ba8:	2e0a      	cmp	r6, #10
 8000baa:	d1df      	bne.n	8000b6c <__swbuf_r+0x2e>
 8000bac:	4621      	mov	r1, r4
 8000bae:	4628      	mov	r0, r5
 8000bb0:	f000 fa4c 	bl	800104c <_fflush_r>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d0d9      	beq.n	8000b6c <__swbuf_r+0x2e>
 8000bb8:	e7d6      	b.n	8000b68 <__swbuf_r+0x2a>
	...

08000bbc <__swsetup_r>:
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <__swsetup_r+0xa8>)
 8000bc0:	4605      	mov	r5, r0
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	460c      	mov	r4, r1
 8000bc6:	b118      	cbz	r0, 8000bd0 <__swsetup_r+0x14>
 8000bc8:	6a03      	ldr	r3, [r0, #32]
 8000bca:	b90b      	cbnz	r3, 8000bd0 <__swsetup_r+0x14>
 8000bcc:	f7ff fee0 	bl	8000990 <__sinit>
 8000bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bd4:	0719      	lsls	r1, r3, #28
 8000bd6:	d422      	bmi.n	8000c1e <__swsetup_r+0x62>
 8000bd8:	06da      	lsls	r2, r3, #27
 8000bda:	d407      	bmi.n	8000bec <__swsetup_r+0x30>
 8000bdc:	2209      	movs	r2, #9
 8000bde:	602a      	str	r2, [r5, #0]
 8000be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be4:	81a3      	strh	r3, [r4, #12]
 8000be6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bea:	e033      	b.n	8000c54 <__swsetup_r+0x98>
 8000bec:	0758      	lsls	r0, r3, #29
 8000bee:	d512      	bpl.n	8000c16 <__swsetup_r+0x5a>
 8000bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bf2:	b141      	cbz	r1, 8000c06 <__swsetup_r+0x4a>
 8000bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d002      	beq.n	8000c02 <__swsetup_r+0x46>
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f000 f8a9 	bl	8000d54 <_free_r>
 8000c02:	2300      	movs	r3, #0
 8000c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c06:	89a3      	ldrh	r3, [r4, #12]
 8000c08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000c0c:	81a3      	strh	r3, [r4, #12]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	6063      	str	r3, [r4, #4]
 8000c12:	6923      	ldr	r3, [r4, #16]
 8000c14:	6023      	str	r3, [r4, #0]
 8000c16:	89a3      	ldrh	r3, [r4, #12]
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	81a3      	strh	r3, [r4, #12]
 8000c1e:	6923      	ldr	r3, [r4, #16]
 8000c20:	b94b      	cbnz	r3, 8000c36 <__swsetup_r+0x7a>
 8000c22:	89a3      	ldrh	r3, [r4, #12]
 8000c24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c2c:	d003      	beq.n	8000c36 <__swsetup_r+0x7a>
 8000c2e:	4621      	mov	r1, r4
 8000c30:	4628      	mov	r0, r5
 8000c32:	f000 fa59 	bl	80010e8 <__smakebuf_r>
 8000c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c3a:	f013 0201 	ands.w	r2, r3, #1
 8000c3e:	d00a      	beq.n	8000c56 <__swsetup_r+0x9a>
 8000c40:	2200      	movs	r2, #0
 8000c42:	60a2      	str	r2, [r4, #8]
 8000c44:	6962      	ldr	r2, [r4, #20]
 8000c46:	4252      	negs	r2, r2
 8000c48:	61a2      	str	r2, [r4, #24]
 8000c4a:	6922      	ldr	r2, [r4, #16]
 8000c4c:	b942      	cbnz	r2, 8000c60 <__swsetup_r+0xa4>
 8000c4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000c52:	d1c5      	bne.n	8000be0 <__swsetup_r+0x24>
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	0799      	lsls	r1, r3, #30
 8000c58:	bf58      	it	pl
 8000c5a:	6962      	ldrpl	r2, [r4, #20]
 8000c5c:	60a2      	str	r2, [r4, #8]
 8000c5e:	e7f4      	b.n	8000c4a <__swsetup_r+0x8e>
 8000c60:	2000      	movs	r0, #0
 8000c62:	e7f7      	b.n	8000c54 <__swsetup_r+0x98>
 8000c64:	20000010 	.word	0x20000010

08000c68 <memset>:
 8000c68:	4402      	add	r2, r0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d100      	bne.n	8000c72 <memset+0xa>
 8000c70:	4770      	bx	lr
 8000c72:	f803 1b01 	strb.w	r1, [r3], #1
 8000c76:	e7f9      	b.n	8000c6c <memset+0x4>

08000c78 <_close_r>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	4d06      	ldr	r5, [pc, #24]	@ (8000c94 <_close_r+0x1c>)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4608      	mov	r0, r1
 8000c82:	602b      	str	r3, [r5, #0]
 8000c84:	f7ff fbb3 	bl	80003ee <_close>
 8000c88:	1c43      	adds	r3, r0, #1
 8000c8a:	d102      	bne.n	8000c92 <_close_r+0x1a>
 8000c8c:	682b      	ldr	r3, [r5, #0]
 8000c8e:	b103      	cbz	r3, 8000c92 <_close_r+0x1a>
 8000c90:	6023      	str	r3, [r4, #0]
 8000c92:	bd38      	pop	{r3, r4, r5, pc}
 8000c94:	200001c0 	.word	0x200001c0

08000c98 <_lseek_r>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4d07      	ldr	r5, [pc, #28]	@ (8000cb8 <_lseek_r+0x20>)
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	602a      	str	r2, [r5, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f7ff fbc8 	bl	800043c <_lseek>
 8000cac:	1c43      	adds	r3, r0, #1
 8000cae:	d102      	bne.n	8000cb6 <_lseek_r+0x1e>
 8000cb0:	682b      	ldr	r3, [r5, #0]
 8000cb2:	b103      	cbz	r3, 8000cb6 <_lseek_r+0x1e>
 8000cb4:	6023      	str	r3, [r4, #0]
 8000cb6:	bd38      	pop	{r3, r4, r5, pc}
 8000cb8:	200001c0 	.word	0x200001c0

08000cbc <_read_r>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	4d07      	ldr	r5, [pc, #28]	@ (8000cdc <_read_r+0x20>)
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	602a      	str	r2, [r5, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f7ff fb56 	bl	800037c <_read>
 8000cd0:	1c43      	adds	r3, r0, #1
 8000cd2:	d102      	bne.n	8000cda <_read_r+0x1e>
 8000cd4:	682b      	ldr	r3, [r5, #0]
 8000cd6:	b103      	cbz	r3, 8000cda <_read_r+0x1e>
 8000cd8:	6023      	str	r3, [r4, #0]
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	200001c0 	.word	0x200001c0

08000ce0 <_write_r>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	4d07      	ldr	r5, [pc, #28]	@ (8000d00 <_write_r+0x20>)
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	4611      	mov	r1, r2
 8000cea:	2200      	movs	r2, #0
 8000cec:	602a      	str	r2, [r5, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f7ff fb61 	bl	80003b6 <_write>
 8000cf4:	1c43      	adds	r3, r0, #1
 8000cf6:	d102      	bne.n	8000cfe <_write_r+0x1e>
 8000cf8:	682b      	ldr	r3, [r5, #0]
 8000cfa:	b103      	cbz	r3, 8000cfe <_write_r+0x1e>
 8000cfc:	6023      	str	r3, [r4, #0]
 8000cfe:	bd38      	pop	{r3, r4, r5, pc}
 8000d00:	200001c0 	.word	0x200001c0

08000d04 <__libc_init_array>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	4d0d      	ldr	r5, [pc, #52]	@ (8000d3c <__libc_init_array+0x38>)
 8000d08:	4c0d      	ldr	r4, [pc, #52]	@ (8000d40 <__libc_init_array+0x3c>)
 8000d0a:	1b64      	subs	r4, r4, r5
 8000d0c:	10a4      	asrs	r4, r4, #2
 8000d0e:	2600      	movs	r6, #0
 8000d10:	42a6      	cmp	r6, r4
 8000d12:	d109      	bne.n	8000d28 <__libc_init_array+0x24>
 8000d14:	4d0b      	ldr	r5, [pc, #44]	@ (8000d44 <__libc_init_array+0x40>)
 8000d16:	4c0c      	ldr	r4, [pc, #48]	@ (8000d48 <__libc_init_array+0x44>)
 8000d18:	f000 fa54 	bl	80011c4 <_init>
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	2600      	movs	r6, #0
 8000d22:	42a6      	cmp	r6, r4
 8000d24:	d105      	bne.n	8000d32 <__libc_init_array+0x2e>
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d2c:	4798      	blx	r3
 8000d2e:	3601      	adds	r6, #1
 8000d30:	e7ee      	b.n	8000d10 <__libc_init_array+0xc>
 8000d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d36:	4798      	blx	r3
 8000d38:	3601      	adds	r6, #1
 8000d3a:	e7f2      	b.n	8000d22 <__libc_init_array+0x1e>
 8000d3c:	080011fc 	.word	0x080011fc
 8000d40:	080011fc 	.word	0x080011fc
 8000d44:	080011fc 	.word	0x080011fc
 8000d48:	08001200 	.word	0x08001200

08000d4c <__retarget_lock_init_recursive>:
 8000d4c:	4770      	bx	lr

08000d4e <__retarget_lock_acquire_recursive>:
 8000d4e:	4770      	bx	lr

08000d50 <__retarget_lock_release_recursive>:
 8000d50:	4770      	bx	lr
	...

08000d54 <_free_r>:
 8000d54:	b538      	push	{r3, r4, r5, lr}
 8000d56:	4605      	mov	r5, r0
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d041      	beq.n	8000de0 <_free_r+0x8c>
 8000d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d60:	1f0c      	subs	r4, r1, #4
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bfb8      	it	lt
 8000d66:	18e4      	addlt	r4, r4, r3
 8000d68:	f000 f8e0 	bl	8000f2c <__malloc_lock>
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <_free_r+0x90>)
 8000d6e:	6813      	ldr	r3, [r2, #0]
 8000d70:	b933      	cbnz	r3, 8000d80 <_free_r+0x2c>
 8000d72:	6063      	str	r3, [r4, #4]
 8000d74:	6014      	str	r4, [r2, #0]
 8000d76:	4628      	mov	r0, r5
 8000d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d7c:	f000 b8dc 	b.w	8000f38 <__malloc_unlock>
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d908      	bls.n	8000d96 <_free_r+0x42>
 8000d84:	6820      	ldr	r0, [r4, #0]
 8000d86:	1821      	adds	r1, r4, r0
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf01      	itttt	eq
 8000d8c:	6819      	ldreq	r1, [r3, #0]
 8000d8e:	685b      	ldreq	r3, [r3, #4]
 8000d90:	1809      	addeq	r1, r1, r0
 8000d92:	6021      	streq	r1, [r4, #0]
 8000d94:	e7ed      	b.n	8000d72 <_free_r+0x1e>
 8000d96:	461a      	mov	r2, r3
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	b10b      	cbz	r3, 8000da0 <_free_r+0x4c>
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d9fa      	bls.n	8000d96 <_free_r+0x42>
 8000da0:	6811      	ldr	r1, [r2, #0]
 8000da2:	1850      	adds	r0, r2, r1
 8000da4:	42a0      	cmp	r0, r4
 8000da6:	d10b      	bne.n	8000dc0 <_free_r+0x6c>
 8000da8:	6820      	ldr	r0, [r4, #0]
 8000daa:	4401      	add	r1, r0
 8000dac:	1850      	adds	r0, r2, r1
 8000dae:	4283      	cmp	r3, r0
 8000db0:	6011      	str	r1, [r2, #0]
 8000db2:	d1e0      	bne.n	8000d76 <_free_r+0x22>
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	6053      	str	r3, [r2, #4]
 8000dba:	4408      	add	r0, r1
 8000dbc:	6010      	str	r0, [r2, #0]
 8000dbe:	e7da      	b.n	8000d76 <_free_r+0x22>
 8000dc0:	d902      	bls.n	8000dc8 <_free_r+0x74>
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	602b      	str	r3, [r5, #0]
 8000dc6:	e7d6      	b.n	8000d76 <_free_r+0x22>
 8000dc8:	6820      	ldr	r0, [r4, #0]
 8000dca:	1821      	adds	r1, r4, r0
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	bf04      	itt	eq
 8000dd0:	6819      	ldreq	r1, [r3, #0]
 8000dd2:	685b      	ldreq	r3, [r3, #4]
 8000dd4:	6063      	str	r3, [r4, #4]
 8000dd6:	bf04      	itt	eq
 8000dd8:	1809      	addeq	r1, r1, r0
 8000dda:	6021      	streq	r1, [r4, #0]
 8000ddc:	6054      	str	r4, [r2, #4]
 8000dde:	e7ca      	b.n	8000d76 <_free_r+0x22>
 8000de0:	bd38      	pop	{r3, r4, r5, pc}
 8000de2:	bf00      	nop
 8000de4:	200001cc 	.word	0x200001cc

08000de8 <sbrk_aligned>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	4e0f      	ldr	r6, [pc, #60]	@ (8000e28 <sbrk_aligned+0x40>)
 8000dec:	460c      	mov	r4, r1
 8000dee:	6831      	ldr	r1, [r6, #0]
 8000df0:	4605      	mov	r5, r0
 8000df2:	b911      	cbnz	r1, 8000dfa <sbrk_aligned+0x12>
 8000df4:	f000 f9d6 	bl	80011a4 <_sbrk_r>
 8000df8:	6030      	str	r0, [r6, #0]
 8000dfa:	4621      	mov	r1, r4
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	f000 f9d1 	bl	80011a4 <_sbrk_r>
 8000e02:	1c43      	adds	r3, r0, #1
 8000e04:	d103      	bne.n	8000e0e <sbrk_aligned+0x26>
 8000e06:	f04f 34ff 	mov.w	r4, #4294967295
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
 8000e0e:	1cc4      	adds	r4, r0, #3
 8000e10:	f024 0403 	bic.w	r4, r4, #3
 8000e14:	42a0      	cmp	r0, r4
 8000e16:	d0f8      	beq.n	8000e0a <sbrk_aligned+0x22>
 8000e18:	1a21      	subs	r1, r4, r0
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f000 f9c2 	bl	80011a4 <_sbrk_r>
 8000e20:	3001      	adds	r0, #1
 8000e22:	d1f2      	bne.n	8000e0a <sbrk_aligned+0x22>
 8000e24:	e7ef      	b.n	8000e06 <sbrk_aligned+0x1e>
 8000e26:	bf00      	nop
 8000e28:	200001c8 	.word	0x200001c8

08000e2c <_malloc_r>:
 8000e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e30:	1ccd      	adds	r5, r1, #3
 8000e32:	f025 0503 	bic.w	r5, r5, #3
 8000e36:	3508      	adds	r5, #8
 8000e38:	2d0c      	cmp	r5, #12
 8000e3a:	bf38      	it	cc
 8000e3c:	250c      	movcc	r5, #12
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	4606      	mov	r6, r0
 8000e42:	db01      	blt.n	8000e48 <_malloc_r+0x1c>
 8000e44:	42a9      	cmp	r1, r5
 8000e46:	d904      	bls.n	8000e52 <_malloc_r+0x26>
 8000e48:	230c      	movs	r3, #12
 8000e4a:	6033      	str	r3, [r6, #0]
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f28 <_malloc_r+0xfc>
 8000e56:	f000 f869 	bl	8000f2c <__malloc_lock>
 8000e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e5e:	461c      	mov	r4, r3
 8000e60:	bb44      	cbnz	r4, 8000eb4 <_malloc_r+0x88>
 8000e62:	4629      	mov	r1, r5
 8000e64:	4630      	mov	r0, r6
 8000e66:	f7ff ffbf 	bl	8000de8 <sbrk_aligned>
 8000e6a:	1c43      	adds	r3, r0, #1
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	d158      	bne.n	8000f22 <_malloc_r+0xf6>
 8000e70:	f8d8 4000 	ldr.w	r4, [r8]
 8000e74:	4627      	mov	r7, r4
 8000e76:	2f00      	cmp	r7, #0
 8000e78:	d143      	bne.n	8000f02 <_malloc_r+0xd6>
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	d04b      	beq.n	8000f16 <_malloc_r+0xea>
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	4639      	mov	r1, r7
 8000e82:	4630      	mov	r0, r6
 8000e84:	eb04 0903 	add.w	r9, r4, r3
 8000e88:	f000 f98c 	bl	80011a4 <_sbrk_r>
 8000e8c:	4581      	cmp	r9, r0
 8000e8e:	d142      	bne.n	8000f16 <_malloc_r+0xea>
 8000e90:	6821      	ldr	r1, [r4, #0]
 8000e92:	1a6d      	subs	r5, r5, r1
 8000e94:	4629      	mov	r1, r5
 8000e96:	4630      	mov	r0, r6
 8000e98:	f7ff ffa6 	bl	8000de8 <sbrk_aligned>
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	d03a      	beq.n	8000f16 <_malloc_r+0xea>
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	442b      	add	r3, r5
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	bb62      	cbnz	r2, 8000f08 <_malloc_r+0xdc>
 8000eae:	f8c8 7000 	str.w	r7, [r8]
 8000eb2:	e00f      	b.n	8000ed4 <_malloc_r+0xa8>
 8000eb4:	6822      	ldr	r2, [r4, #0]
 8000eb6:	1b52      	subs	r2, r2, r5
 8000eb8:	d420      	bmi.n	8000efc <_malloc_r+0xd0>
 8000eba:	2a0b      	cmp	r2, #11
 8000ebc:	d917      	bls.n	8000eee <_malloc_r+0xc2>
 8000ebe:	1961      	adds	r1, r4, r5
 8000ec0:	42a3      	cmp	r3, r4
 8000ec2:	6025      	str	r5, [r4, #0]
 8000ec4:	bf18      	it	ne
 8000ec6:	6059      	strne	r1, [r3, #4]
 8000ec8:	6863      	ldr	r3, [r4, #4]
 8000eca:	bf08      	it	eq
 8000ecc:	f8c8 1000 	streq.w	r1, [r8]
 8000ed0:	5162      	str	r2, [r4, r5]
 8000ed2:	604b      	str	r3, [r1, #4]
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	f000 f82f 	bl	8000f38 <__malloc_unlock>
 8000eda:	f104 000b 	add.w	r0, r4, #11
 8000ede:	1d23      	adds	r3, r4, #4
 8000ee0:	f020 0007 	bic.w	r0, r0, #7
 8000ee4:	1ac2      	subs	r2, r0, r3
 8000ee6:	bf1c      	itt	ne
 8000ee8:	1a1b      	subne	r3, r3, r0
 8000eea:	50a3      	strne	r3, [r4, r2]
 8000eec:	e7af      	b.n	8000e4e <_malloc_r+0x22>
 8000eee:	6862      	ldr	r2, [r4, #4]
 8000ef0:	42a3      	cmp	r3, r4
 8000ef2:	bf0c      	ite	eq
 8000ef4:	f8c8 2000 	streq.w	r2, [r8]
 8000ef8:	605a      	strne	r2, [r3, #4]
 8000efa:	e7eb      	b.n	8000ed4 <_malloc_r+0xa8>
 8000efc:	4623      	mov	r3, r4
 8000efe:	6864      	ldr	r4, [r4, #4]
 8000f00:	e7ae      	b.n	8000e60 <_malloc_r+0x34>
 8000f02:	463c      	mov	r4, r7
 8000f04:	687f      	ldr	r7, [r7, #4]
 8000f06:	e7b6      	b.n	8000e76 <_malloc_r+0x4a>
 8000f08:	461a      	mov	r2, r3
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	42a3      	cmp	r3, r4
 8000f0e:	d1fb      	bne.n	8000f08 <_malloc_r+0xdc>
 8000f10:	2300      	movs	r3, #0
 8000f12:	6053      	str	r3, [r2, #4]
 8000f14:	e7de      	b.n	8000ed4 <_malloc_r+0xa8>
 8000f16:	230c      	movs	r3, #12
 8000f18:	6033      	str	r3, [r6, #0]
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	f000 f80c 	bl	8000f38 <__malloc_unlock>
 8000f20:	e794      	b.n	8000e4c <_malloc_r+0x20>
 8000f22:	6005      	str	r5, [r0, #0]
 8000f24:	e7d6      	b.n	8000ed4 <_malloc_r+0xa8>
 8000f26:	bf00      	nop
 8000f28:	200001cc 	.word	0x200001cc

08000f2c <__malloc_lock>:
 8000f2c:	4801      	ldr	r0, [pc, #4]	@ (8000f34 <__malloc_lock+0x8>)
 8000f2e:	f7ff bf0e 	b.w	8000d4e <__retarget_lock_acquire_recursive>
 8000f32:	bf00      	nop
 8000f34:	200001c4 	.word	0x200001c4

08000f38 <__malloc_unlock>:
 8000f38:	4801      	ldr	r0, [pc, #4]	@ (8000f40 <__malloc_unlock+0x8>)
 8000f3a:	f7ff bf09 	b.w	8000d50 <__retarget_lock_release_recursive>
 8000f3e:	bf00      	nop
 8000f40:	200001c4 	.word	0x200001c4

08000f44 <__sflush_r>:
 8000f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4c:	0716      	lsls	r6, r2, #28
 8000f4e:	4605      	mov	r5, r0
 8000f50:	460c      	mov	r4, r1
 8000f52:	d454      	bmi.n	8000ffe <__sflush_r+0xba>
 8000f54:	684b      	ldr	r3, [r1, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	dc02      	bgt.n	8000f60 <__sflush_r+0x1c>
 8000f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dd48      	ble.n	8000ff2 <__sflush_r+0xae>
 8000f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d045      	beq.n	8000ff2 <__sflush_r+0xae>
 8000f66:	2300      	movs	r3, #0
 8000f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f6c:	682f      	ldr	r7, [r5, #0]
 8000f6e:	6a21      	ldr	r1, [r4, #32]
 8000f70:	602b      	str	r3, [r5, #0]
 8000f72:	d030      	beq.n	8000fd6 <__sflush_r+0x92>
 8000f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f76:	89a3      	ldrh	r3, [r4, #12]
 8000f78:	0759      	lsls	r1, r3, #29
 8000f7a:	d505      	bpl.n	8000f88 <__sflush_r+0x44>
 8000f7c:	6863      	ldr	r3, [r4, #4]
 8000f7e:	1ad2      	subs	r2, r2, r3
 8000f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f82:	b10b      	cbz	r3, 8000f88 <__sflush_r+0x44>
 8000f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	2300      	movs	r3, #0
 8000f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f8c:	6a21      	ldr	r1, [r4, #32]
 8000f8e:	4628      	mov	r0, r5
 8000f90:	47b0      	blx	r6
 8000f92:	1c43      	adds	r3, r0, #1
 8000f94:	89a3      	ldrh	r3, [r4, #12]
 8000f96:	d106      	bne.n	8000fa6 <__sflush_r+0x62>
 8000f98:	6829      	ldr	r1, [r5, #0]
 8000f9a:	291d      	cmp	r1, #29
 8000f9c:	d82b      	bhi.n	8000ff6 <__sflush_r+0xb2>
 8000f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001048 <__sflush_r+0x104>)
 8000fa0:	410a      	asrs	r2, r1
 8000fa2:	07d6      	lsls	r6, r2, #31
 8000fa4:	d427      	bmi.n	8000ff6 <__sflush_r+0xb2>
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	6062      	str	r2, [r4, #4]
 8000faa:	04d9      	lsls	r1, r3, #19
 8000fac:	6922      	ldr	r2, [r4, #16]
 8000fae:	6022      	str	r2, [r4, #0]
 8000fb0:	d504      	bpl.n	8000fbc <__sflush_r+0x78>
 8000fb2:	1c42      	adds	r2, r0, #1
 8000fb4:	d101      	bne.n	8000fba <__sflush_r+0x76>
 8000fb6:	682b      	ldr	r3, [r5, #0]
 8000fb8:	b903      	cbnz	r3, 8000fbc <__sflush_r+0x78>
 8000fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8000fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000fbe:	602f      	str	r7, [r5, #0]
 8000fc0:	b1b9      	cbz	r1, 8000ff2 <__sflush_r+0xae>
 8000fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	d002      	beq.n	8000fd0 <__sflush_r+0x8c>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	f7ff fec2 	bl	8000d54 <_free_r>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8000fd4:	e00d      	b.n	8000ff2 <__sflush_r+0xae>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	4628      	mov	r0, r5
 8000fda:	47b0      	blx	r6
 8000fdc:	4602      	mov	r2, r0
 8000fde:	1c50      	adds	r0, r2, #1
 8000fe0:	d1c9      	bne.n	8000f76 <__sflush_r+0x32>
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0c6      	beq.n	8000f76 <__sflush_r+0x32>
 8000fe8:	2b1d      	cmp	r3, #29
 8000fea:	d001      	beq.n	8000ff0 <__sflush_r+0xac>
 8000fec:	2b16      	cmp	r3, #22
 8000fee:	d11e      	bne.n	800102e <__sflush_r+0xea>
 8000ff0:	602f      	str	r7, [r5, #0]
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	e022      	b.n	800103c <__sflush_r+0xf8>
 8000ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	e01b      	b.n	8001036 <__sflush_r+0xf2>
 8000ffe:	690f      	ldr	r7, [r1, #16]
 8001000:	2f00      	cmp	r7, #0
 8001002:	d0f6      	beq.n	8000ff2 <__sflush_r+0xae>
 8001004:	0793      	lsls	r3, r2, #30
 8001006:	680e      	ldr	r6, [r1, #0]
 8001008:	bf08      	it	eq
 800100a:	694b      	ldreq	r3, [r1, #20]
 800100c:	600f      	str	r7, [r1, #0]
 800100e:	bf18      	it	ne
 8001010:	2300      	movne	r3, #0
 8001012:	eba6 0807 	sub.w	r8, r6, r7
 8001016:	608b      	str	r3, [r1, #8]
 8001018:	f1b8 0f00 	cmp.w	r8, #0
 800101c:	dde9      	ble.n	8000ff2 <__sflush_r+0xae>
 800101e:	6a21      	ldr	r1, [r4, #32]
 8001020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001022:	4643      	mov	r3, r8
 8001024:	463a      	mov	r2, r7
 8001026:	4628      	mov	r0, r5
 8001028:	47b0      	blx	r6
 800102a:	2800      	cmp	r0, #0
 800102c:	dc08      	bgt.n	8001040 <__sflush_r+0xfc>
 800102e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001036:	81a3      	strh	r3, [r4, #12]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001040:	4407      	add	r7, r0
 8001042:	eba8 0800 	sub.w	r8, r8, r0
 8001046:	e7e7      	b.n	8001018 <__sflush_r+0xd4>
 8001048:	dfbffffe 	.word	0xdfbffffe

0800104c <_fflush_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	690b      	ldr	r3, [r1, #16]
 8001050:	4605      	mov	r5, r0
 8001052:	460c      	mov	r4, r1
 8001054:	b913      	cbnz	r3, 800105c <_fflush_r+0x10>
 8001056:	2500      	movs	r5, #0
 8001058:	4628      	mov	r0, r5
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	b118      	cbz	r0, 8001066 <_fflush_r+0x1a>
 800105e:	6a03      	ldr	r3, [r0, #32]
 8001060:	b90b      	cbnz	r3, 8001066 <_fflush_r+0x1a>
 8001062:	f7ff fc95 	bl	8000990 <__sinit>
 8001066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f3      	beq.n	8001056 <_fflush_r+0xa>
 800106e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001070:	07d0      	lsls	r0, r2, #31
 8001072:	d404      	bmi.n	800107e <_fflush_r+0x32>
 8001074:	0599      	lsls	r1, r3, #22
 8001076:	d402      	bmi.n	800107e <_fflush_r+0x32>
 8001078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800107a:	f7ff fe68 	bl	8000d4e <__retarget_lock_acquire_recursive>
 800107e:	4628      	mov	r0, r5
 8001080:	4621      	mov	r1, r4
 8001082:	f7ff ff5f 	bl	8000f44 <__sflush_r>
 8001086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001088:	07da      	lsls	r2, r3, #31
 800108a:	4605      	mov	r5, r0
 800108c:	d4e4      	bmi.n	8001058 <_fflush_r+0xc>
 800108e:	89a3      	ldrh	r3, [r4, #12]
 8001090:	059b      	lsls	r3, r3, #22
 8001092:	d4e1      	bmi.n	8001058 <_fflush_r+0xc>
 8001094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001096:	f7ff fe5b 	bl	8000d50 <__retarget_lock_release_recursive>
 800109a:	e7dd      	b.n	8001058 <_fflush_r+0xc>

0800109c <__swhatbuf_r>:
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	460c      	mov	r4, r1
 80010a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a4:	2900      	cmp	r1, #0
 80010a6:	b096      	sub	sp, #88	@ 0x58
 80010a8:	4615      	mov	r5, r2
 80010aa:	461e      	mov	r6, r3
 80010ac:	da0d      	bge.n	80010ca <__swhatbuf_r+0x2e>
 80010ae:	89a3      	ldrh	r3, [r4, #12]
 80010b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80010b4:	f04f 0100 	mov.w	r1, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2340      	movne	r3, #64	@ 0x40
 80010bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80010c0:	2000      	movs	r0, #0
 80010c2:	6031      	str	r1, [r6, #0]
 80010c4:	602b      	str	r3, [r5, #0]
 80010c6:	b016      	add	sp, #88	@ 0x58
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	466a      	mov	r2, sp
 80010cc:	f000 f848 	bl	8001160 <_fstat_r>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	dbec      	blt.n	80010ae <__swhatbuf_r+0x12>
 80010d4:	9901      	ldr	r1, [sp, #4]
 80010d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80010da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80010de:	4259      	negs	r1, r3
 80010e0:	4159      	adcs	r1, r3
 80010e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e6:	e7eb      	b.n	80010c0 <__swhatbuf_r+0x24>

080010e8 <__smakebuf_r>:
 80010e8:	898b      	ldrh	r3, [r1, #12]
 80010ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010ec:	079d      	lsls	r5, r3, #30
 80010ee:	4606      	mov	r6, r0
 80010f0:	460c      	mov	r4, r1
 80010f2:	d507      	bpl.n	8001104 <__smakebuf_r+0x1c>
 80010f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80010f8:	6023      	str	r3, [r4, #0]
 80010fa:	6123      	str	r3, [r4, #16]
 80010fc:	2301      	movs	r3, #1
 80010fe:	6163      	str	r3, [r4, #20]
 8001100:	b003      	add	sp, #12
 8001102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001104:	ab01      	add	r3, sp, #4
 8001106:	466a      	mov	r2, sp
 8001108:	f7ff ffc8 	bl	800109c <__swhatbuf_r>
 800110c:	9f00      	ldr	r7, [sp, #0]
 800110e:	4605      	mov	r5, r0
 8001110:	4639      	mov	r1, r7
 8001112:	4630      	mov	r0, r6
 8001114:	f7ff fe8a 	bl	8000e2c <_malloc_r>
 8001118:	b948      	cbnz	r0, 800112e <__smakebuf_r+0x46>
 800111a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800111e:	059a      	lsls	r2, r3, #22
 8001120:	d4ee      	bmi.n	8001100 <__smakebuf_r+0x18>
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	81a3      	strh	r3, [r4, #12]
 800112c:	e7e2      	b.n	80010f4 <__smakebuf_r+0xc>
 800112e:	89a3      	ldrh	r3, [r4, #12]
 8001130:	6020      	str	r0, [r4, #0]
 8001132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001136:	81a3      	strh	r3, [r4, #12]
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800113e:	b15b      	cbz	r3, 8001158 <__smakebuf_r+0x70>
 8001140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001144:	4630      	mov	r0, r6
 8001146:	f000 f81d 	bl	8001184 <_isatty_r>
 800114a:	b128      	cbz	r0, 8001158 <__smakebuf_r+0x70>
 800114c:	89a3      	ldrh	r3, [r4, #12]
 800114e:	f023 0303 	bic.w	r3, r3, #3
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	81a3      	strh	r3, [r4, #12]
 8001158:	89a3      	ldrh	r3, [r4, #12]
 800115a:	431d      	orrs	r5, r3
 800115c:	81a5      	strh	r5, [r4, #12]
 800115e:	e7cf      	b.n	8001100 <__smakebuf_r+0x18>

08001160 <_fstat_r>:
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4d07      	ldr	r5, [pc, #28]	@ (8001180 <_fstat_r+0x20>)
 8001164:	2300      	movs	r3, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	602b      	str	r3, [r5, #0]
 800116e:	f7ff f94a 	bl	8000406 <_fstat>
 8001172:	1c43      	adds	r3, r0, #1
 8001174:	d102      	bne.n	800117c <_fstat_r+0x1c>
 8001176:	682b      	ldr	r3, [r5, #0]
 8001178:	b103      	cbz	r3, 800117c <_fstat_r+0x1c>
 800117a:	6023      	str	r3, [r4, #0]
 800117c:	bd38      	pop	{r3, r4, r5, pc}
 800117e:	bf00      	nop
 8001180:	200001c0 	.word	0x200001c0

08001184 <_isatty_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4d06      	ldr	r5, [pc, #24]	@ (80011a0 <_isatty_r+0x1c>)
 8001188:	2300      	movs	r3, #0
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	602b      	str	r3, [r5, #0]
 8001190:	f7ff f949 	bl	8000426 <_isatty>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d102      	bne.n	800119e <_isatty_r+0x1a>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	b103      	cbz	r3, 800119e <_isatty_r+0x1a>
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	200001c0 	.word	0x200001c0

080011a4 <_sbrk_r>:
 80011a4:	b538      	push	{r3, r4, r5, lr}
 80011a6:	4d06      	ldr	r5, [pc, #24]	@ (80011c0 <_sbrk_r+0x1c>)
 80011a8:	2300      	movs	r3, #0
 80011aa:	4604      	mov	r4, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	602b      	str	r3, [r5, #0]
 80011b0:	f7ff f952 	bl	8000458 <_sbrk>
 80011b4:	1c43      	adds	r3, r0, #1
 80011b6:	d102      	bne.n	80011be <_sbrk_r+0x1a>
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	b103      	cbz	r3, 80011be <_sbrk_r+0x1a>
 80011bc:	6023      	str	r3, [r4, #0]
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	200001c0 	.word	0x200001c0

080011c4 <_init>:
 80011c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c6:	bf00      	nop
 80011c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ca:	bc08      	pop	{r3}
 80011cc:	469e      	mov	lr, r3
 80011ce:	4770      	bx	lr

080011d0 <_fini>:
 80011d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d2:	bf00      	nop
 80011d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011d6:	bc08      	pop	{r3}
 80011d8:	469e      	mov	lr, r3
 80011da:	4770      	bx	lr
