
Inter Integrated Circuit - I2C Protocol.

I2C -- 

serial data communication between Integrated circuits.

I2C protocol details -- 
how data should be sent, how data should be received
how hand shaking should happen between sender and receiver,
error handling are complex than SPI. 
In other words SPI is simple protocol compared to I2C.

SPI - specificiation 

I2C - NXP - 


For SPI there is no dedicated spec but TI and motorola have 
their own spec.

I2C protocol - multi master capable.
SPI has no guidelines to achieve this, but depends on 
MCU designers. 

STM SPI peripherals can be used in multi master configurations 
but arbitration should be handled by software code.

ACK - I2C hardware automatically ACKs every byte received.
SPI does not support any automatic ACKing.

I2C needs just 2 pins for the communication.
SPI consumes more pins when more slaves are involved.

I2c - just 2 pins -- 
SCL and SDA 

+Vcc - pulled to VCC using pull up resistor to SDA and SCL.

Addressing -- 

I2C master talks to slaves based on slave address - 
whereas in SPI dedicatd pin is used to select the slave.

Communication - 
I2C is half duplex whereas SPI is full duplex.

For I2C the max speed is 4Mhz in ultra speed plus.
For STM microcontrollers the max speed is just 400 KHZ.
For SPI max speed is its Fpclk/2. That means if the peripheral
clock is 20Mhz, then speed can be 10Mhz.

In i2c slave can make master wait by holding the clock down
if it is busy, thanks to clock stretching feature of I2C.
But in SPI, slave has no control over clock, programmers 
may use their own trick to overcome this situation.

Data rate -- 
number of bits transferred from sender to receiver in 1 sec 
is very much lesser in I2c compare to SPI.

I2C - low data rate - gathering data from sensors.

periphear clock of 40Mhz, then in I2c -- 400Kpbs you can achieve max.

SPI is 50 times faster than I2C.

###
I2C bus terminology --

transmitter - device which sends data to the bus
receiver - device which receives data from the bus
master - the device which initiates a transfer generates clock 
signals and terminates a transfer.
Slave - the device addressed by a master
Multi-master -more than one master can attempt to control the bus 
at the same time without corupting the message.

Arbitration - procedure/technique to ensure that, if more than one master 
simultaneoulsy tries to control the bus, only one is allowed 
to do so and the winning message is not corrupted.

Synchronization - procedure to synchronize the clock signals of 
two or more devices.


Data transfer is initiated by the master.
###

I2C - SDA and SCL signals -

Both SDA and SCL are bi-directional lines connected to a positive 
supply voltage via pull up resistor. When the bus is free, 
both lines are held at high.

The output stages of device ocnnected to the bus must have an 
open drain or open collector configuration.

The bus capacitance limites the number of interfaces connected to 
the bus.

###

I2C Pin configuration -- 

Whenever you face problems in I2C, probe the 
SDA and SCL line after i2c initilization.
It must be held at high ( 3.3 V or 1.8 V
depending up on IO voltage levels of your board).

###
I2C modes 
###

Standard mode -- upto to 100Kbps
Fast mode -  upto to 400kbps
Faster mode + - upto 1 Mbps 
High speed mode - 3.4 Mbps -- not supported by STM32F4x.

#####################

Standard mode and fast mode - 

Standard mode - max - 100kbps 
-- when first i2c spec was released.

standard mode device however are not upward compatible;
they cant communicate with devices of fast mode or above.

##
Features of fast mode -- 
upto 400Kbps 
-- 0 to 100kbps in I2c 
-- 

configuring the i2c mode is very important.

### Basics of I2C protocol 


Data is always initiated by the master.

Master first producing the start condition - 

Start condition - S -- 

Address phase - 7 bits + R/W(low active).

R/W = 0 means write i.e. transmission.
1 = read .

ACK  

D7--D0 --
ACK 

P - Stop bit.

Every byte put on the SDA line must be 8 bits long.
Each byte must be followed by an acknowledge bit.
Data is transferred with the MSB first.

When slave receives 1 byte which is data the 
slave is going to send the ACK.

#####
R/W- --
1- means Read , indicates request for data. - READ.

ACK is given by the master. 

Stop condition - releases the bus.
Other master can initiate the communication.

START and STOP conditions -- 

Transactions begin with a START (s) 
and are terminated by a STOP (P).

A high to low transition on the SDA line while 
SCL is high defines a START condition.

A low to high transition on the SDA line 
while sCL is high defines a stop condition.

During ACK, the SDA is pulled low - 
--
Master - repeated Start -- 
basically to read the data.
#########################

START and STOP conditions are always generated 
by the master.
The bus is considered to be busy after the start 
condition.

The bus is considered to be free again a certain 
time after the STOP condition.

When the bus is free another master ( if present)
can get the chance to claim the bus.

The bus stays busy if a repeated START (Sr) 
is generated instead of a STOP condition. 

Most of the MCU's i2c peripheral support both 
master and slave mode. You need not to configure
the mode because when the peripheral generates 
the start condition it automatically becomes 
the master and when it generates the stop condition
it goes back to slave mode.

#########

I2C Address  phase - 

SDA 
SCL 
##
ACK - 
The transmitter releases the SDA line during 
the acknowledge clock pulse so the receiver 
can pull the SDA line low and it remains stable 
low during the high period at this clock pulse.

The ACK takes place after every byte 
The ACK bit allows the receiver to signal the 
transmitter that the byte was successfuly 
received and another byte may be sent. 

The master generates all clock pulses, including 
the acknowledge ninth clock pulse.

SCL 1 and SDA 0 -- ACK 

SCL 1 and SDA 1 -- NACK 

## Data validity -- 

The data on the SDA line must be stable 
during the HIGH period of the clock. The 
HIGH or LOW state at the data line can only 
change when the clock signal on the SCL line 
is low. One clock pulse is 
generated for each data bit  
transferred. This is not 
applicable for start and stop 
transition. 

Repeated start without stop.

MCU -- EEPROM  ( slave)

Write followed by READ.

or 
Read followed by Write -- 

-->> Start -- write 
-- > repeat start - read 
-=--> finally stop.

#############
I2C peripherals of your MCU --

APB1 - I2C1, I2C2, I2C3 -- 

SDA -- noise filter -- data control

SCL -- noise filter == clock control..

Only one data register --> data shift register.


write to data register --

gets copied to data shift register.
Half duplex so only one data register.

when the data received. -- it goes to 
data shift register when 1 byte is received.

the data is moved from shift register to the 
data register. The data register is then read.

## Master mode or slave.

In slave mode -- 
the slave address in own address register.

Clock Control register is controlled by 
CCR, CR1 and CR2 -- register - 
status registers -- SR1 and SR2 ..

Control logic --> DMA and Interrupts.

#############

I2C driver development - 

11th May 2019

i2c_driver.c 
i2c_driver.h 

Driver API requirements and user 
configurable items.
I2C Driver -- 

I2C initialization
I2C master Tx 
I2C master Rx 

I2C slave Tx
I2C Slave Rx 
I2C Error Interrupt handling 
I2C Event Inerrupt handling.

Configurable items for user application.

I2C SCL speed

I2C Device Address 

I2C ACK Control .
-- automatic ACK enable or disable.

I2c FMDutyCycle.
-- if speed is more than 100kbps 
then it is fast mode. 
What should be the duty cycle of the 
clock when the speed is more than
100kbps that is fast mode.

create stm32f4xx_i2c_driver.c 
and stm32f4xx_i2c_driver.h 

- I2C periperhal register def struct
-- I2C base address macros
-- I2c peripheral definition macros.
-- macros to enable and disable 
i2c peripherla clock.
-- bit position definitions of i2c 
peripheral.

I2C_Config_t 

uint32_t I2c_sclSpeed;
uint8_t I2c_deviceAddress;
uint8_t I2C_ACKControl;
uint16_t  I2C_FMDutyCycle;

struct
{
  I2C_RegDef_t 
  I2C_Config_t 

}Handle;

options for I2c_SCL_Speed 

@I2C_SCL_SPEED

#define I2c_SCL_SPEED_Standard_MODE    100000
#define I2c_SCL_SPEED_FAST_MODE_4k     400000
#define I2c_SCL_SPEED_FAST_MODE_2k     200000

@I2cDeviceAddress 

@ACK_Control 

#define I2c_ACK_ENALBE   1
#define I2c_ACK DISABLE   0

@DutyCycle -- of the serial clock in fast mode.

#define I2c_FM_DUTY_2             (0)
#define I2c_FM_DUTYE_16_9         (1)

API prototypes -- 

void I2C_PeriClockControl

void I2C_Init
void I2c_DeInit()

Data send and receive..

I2C_InterruptConfig
I2c_IRQPriorityCOnfig.

I2c_Peripherlal Control.
I2C_GetFlagStatus


void I2c_ApplicationEventCallback(

##3
i2cInit -- steps --

1) Configure the mode - standard or fast.
2) Configure the speed of the serial clock - SCL 
3) Confiure the device address - Applicable when device is 
slave.
4) Enable the ACking.
5) Configure the rise time for I2c Pins ..

time required from ground to Vcc - slew rate.

All these configuraiton must be done when the 
peripheral is disabled in the control register.

void I2c_Init(I2cReg_De_t )
{

}

Configure the speed of the Serial clock.

CCR and CR2 -- 
FREQ and CCR -- 


I2C serial clock - SCL control settings.

I2C peripheral, CR2 and CCR registers are used 
to control the I2C serial clock settings 
and other i2c timings like setup time and hold time.

CR2 and CCR registers - 


CR2 -- 
FRQ[5:0] - APB2 - Peripheral clock frequency.

APB1 -- prescaler - 16Mhz -- CR2_FREQ = 16 Mhz.


CCR --  


Standard mdoe, generate a 100 Khz SCL frequency
APB1 Clock = 16 Mhz.


I2C mode selection - standard mode or fast mode.

FREQ field -- 16 Mhz. 

Calculate and program CCR value of CCR field. 


SM =

SCLCK = 100 Khz 

time period == 10 micro seconds.

50 % deuty cycle   us 

5 * 10 ^ -6 = CCR * 62.5 * 10^-9 

CCR = 80 = 0x50


##

200 kHZ SCL freq -- 

FM mode - 
select the duty cycle - fast mode. 

FOR SM - 50 % duty cycle.

Fast mode -- 
Tlow = 2 T- high

Tlow = 1.8 T- high

Program the Freq field of CR2 with the value of PCK2

T high + T low = 3 * CCR * TPCLK1 

CCR == 26

If duty = 1, 

T high + T low = 25 * CCR * TPCLK1
#################

I2C -- 
recommended value of Thigh and Tlow -- 
Specification Table 10 -- 

Tlow - min 4.7 -- standard mode.

Thight = min  4.0 -- standard mode

###
Fast mode - 1.3 micro seconds 
--- 0.6 micro seconds.

#########################

5 * 10 ^-3  * 10 * -3 

= 5 * 10^ -6 

1/16 = 62.5 * 10 ^-3 * 10^-6 = 62.5 * 10^-9

######################################

I2C_Init() 
--->
Clock Stretching --

means that holding the clock to 0 
or ground level.

The moment clock is held at low, 
then the whole I2C interface pauses 
until clock is given up to its normal 
operation level.

Use of clock stretching -- 

master or slave -- slow down the 
communication by stretching SCL to low,
which prevent the clock to rise high 
again and the i2c communication 
stops for a while.

I2C slave is not able to co-operate with 
the clock speed given by the master 
and needs to slow down a little. 

if slave needs time , then it takes 
the advantage of clock stretchign,
and by holding clock at low, it momentary 
pauses the i2c operation.

###

The slave is not ready for more data, 
so it buys time by holding the clock 
low. The master will wait for the clock 
line to be released before proceeding to 
the next frame.

###

Enable the clock stretching feature.

Possiblility of clock stretching required.








































































